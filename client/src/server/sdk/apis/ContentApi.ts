/* tslint:disable */
/* eslint-disable */
/**
 * Fiber Example API
 * This is a sample swagger for Fiber
 *
 * The version of the OpenAPI document: 1.0
 * Contact: fiber@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentBody,
  ContentContent,
} from '../models';
import {
    ContentBodyFromJSON,
    ContentBodyToJSON,
    ContentContentFromJSON,
    ContentContentToJSON,
} from '../models';

export interface V1ContentIdPutRequest {
    id: number;
    request: ContentBody;
}

export interface V1ContentPostRequest {
    request: ContentBody;
}

export interface V1ContentidDeleteRequest {
    id: number;
}

/**
 * 
 */
export class ContentApi extends runtime.BaseAPI {

    /**
     * Get all content
     */
    async v1ContentGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentContent>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/content`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentContentFromJSON));
    }

    /**
     * Get all content
     */
    async v1ContentGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentContent>> {
        const response = await this.v1ContentGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update content
     */
    async v1ContentIdPutRaw(requestParameters: V1ContentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentContent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1ContentIdPut.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling v1ContentIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/content/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContentBodyToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentContentFromJSON(jsonValue));
    }

    /**
     * Update content
     */
    async v1ContentIdPut(requestParameters: V1ContentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentContent> {
        const response = await this.v1ContentIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create content
     */
    async v1ContentPostRaw(requestParameters: V1ContentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling v1ContentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/content`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentBodyToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create content
     */
    async v1ContentPost(requestParameters: V1ContentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.v1ContentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete content
     */
    async v1ContentidDeleteRaw(requestParameters: V1ContentidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1ContentidDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/content{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete content
     */
    async v1ContentidDelete(requestParameters: V1ContentidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.v1ContentidDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
