/* tslint:disable */
/* eslint-disable */
/**
 * Fiber Example API
 * This is a sample swagger for Fiber
 *
 * The version of the OpenAPI document: 1.0
 * Contact: fiber@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentmodelBody,
  ContentmodelContentModel,
} from '../models';
import {
    ContentmodelBodyFromJSON,
    ContentmodelBodyToJSON,
    ContentmodelContentModelFromJSON,
    ContentmodelContentModelToJSON,
} from '../models';

export interface V1ContentModelIdDeleteRequest {
    id: number;
}

export interface V1ContentModelIdGetRequest {
    id: number;
}

export interface V1ContentModelIdPutRequest {
    id: number;
    request: ContentmodelBody;
}

export interface V1ContentModelPostRequest {
    request: ContentmodelBody;
}

/**
 * 
 */
export class ContentModelApi extends runtime.BaseAPI {

    /**
     * Get all content models
     */
    async v1ContentModelGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentmodelContentModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/contentModel`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentmodelContentModelFromJSON));
    }

    /**
     * Get all content models
     */
    async v1ContentModelGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentmodelContentModel>> {
        const response = await this.v1ContentModelGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete content model
     */
    async v1ContentModelIdDeleteRaw(requestParameters: V1ContentModelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1ContentModelIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/contentModel/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete content model
     */
    async v1ContentModelIdDelete(requestParameters: V1ContentModelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.v1ContentModelIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get content model by id
     */
    async v1ContentModelIdGetRaw(requestParameters: V1ContentModelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentmodelContentModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1ContentModelIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/contentModel/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentmodelContentModelFromJSON(jsonValue));
    }

    /**
     * Get content model by id
     */
    async v1ContentModelIdGet(requestParameters: V1ContentModelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentmodelContentModel> {
        const response = await this.v1ContentModelIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update content model
     */
    async v1ContentModelIdPutRaw(requestParameters: V1ContentModelIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentmodelContentModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1ContentModelIdPut.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling v1ContentModelIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/contentModel/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContentmodelBodyToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentmodelContentModelFromJSON(jsonValue));
    }

    /**
     * Update content model
     */
    async v1ContentModelIdPut(requestParameters: V1ContentModelIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentmodelContentModel> {
        const response = await this.v1ContentModelIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create content model
     */
    async v1ContentModelPostRaw(requestParameters: V1ContentModelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling v1ContentModelPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/contentModel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentmodelBodyToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create content model
     */
    async v1ContentModelPost(requestParameters: V1ContentModelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.v1ContentModelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
