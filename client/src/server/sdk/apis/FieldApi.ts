/* tslint:disable */
/* eslint-disable */
/**
 * Fiber Example API
 * This is a sample swagger for Fiber
 *
 * The version of the OpenAPI document: 1.0
 * Contact: fiber@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FieldBody,
  FieldField,
} from '../models';
import {
    FieldBodyFromJSON,
    FieldBodyToJSON,
    FieldFieldFromJSON,
    FieldFieldToJSON,
} from '../models';

export interface V1FieldIdDeleteRequest {
    id: number;
}

export interface V1FieldIdPutRequest {
    id: number;
    request: FieldBody;
}

export interface V1FieldPostRequest {
    request: FieldBody;
}

/**
 * 
 */
export class FieldApi extends runtime.BaseAPI {

    /**
     * Get all fields
     */
    async v1FieldGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FieldField>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/field`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FieldFieldFromJSON));
    }

    /**
     * Get all fields
     */
    async v1FieldGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FieldField>> {
        const response = await this.v1FieldGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete field
     */
    async v1FieldIdDeleteRaw(requestParameters: V1FieldIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1FieldIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/field/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete field
     */
    async v1FieldIdDelete(requestParameters: V1FieldIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.v1FieldIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update field
     */
    async v1FieldIdPutRaw(requestParameters: V1FieldIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldField>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1FieldIdPut.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling v1FieldIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/field/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FieldBodyToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldFieldFromJSON(jsonValue));
    }

    /**
     * Update field
     */
    async v1FieldIdPut(requestParameters: V1FieldIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldField> {
        const response = await this.v1FieldIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create field
     */
    async v1FieldPostRaw(requestParameters: V1FieldPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling v1FieldPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/field`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FieldBodyToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create field
     */
    async v1FieldPost(requestParameters: V1FieldPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.v1FieldPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
