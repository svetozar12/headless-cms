/* tslint:disable */
/* eslint-disable */
/**
 * Fiber Example API
 * This is a sample swagger for Fiber
 *
 * The version of the OpenAPI document: 1.0
 * Contact: fiber@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FieldtypeBody,
  FieldtypeFieldType,
} from '../models';
import {
    FieldtypeBodyFromJSON,
    FieldtypeBodyToJSON,
    FieldtypeFieldTypeFromJSON,
    FieldtypeFieldTypeToJSON,
} from '../models';

export interface V1FieldTypeIdDeleteRequest {
    id: number;
}

export interface V1FieldTypeIdPutRequest {
    id: number;
    request: FieldtypeBody;
}

export interface V1FieldTypePostRequest {
    request: FieldtypeBody;
}

/**
 * 
 */
export class FieldTypeApi extends runtime.BaseAPI {

    /**
     * Get all field types
     */
    async v1FieldTypeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FieldtypeFieldType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/fieldType`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FieldtypeFieldTypeFromJSON));
    }

    /**
     * Get all field types
     */
    async v1FieldTypeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FieldtypeFieldType>> {
        const response = await this.v1FieldTypeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete field type
     */
    async v1FieldTypeIdDeleteRaw(requestParameters: V1FieldTypeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1FieldTypeIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/fieldType/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete field type
     */
    async v1FieldTypeIdDelete(requestParameters: V1FieldTypeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.v1FieldTypeIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update field type
     */
    async v1FieldTypeIdPutRaw(requestParameters: V1FieldTypeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldtypeFieldType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1FieldTypeIdPut.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling v1FieldTypeIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/fieldType/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FieldtypeBodyToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldtypeFieldTypeFromJSON(jsonValue));
    }

    /**
     * Update field type
     */
    async v1FieldTypeIdPut(requestParameters: V1FieldTypeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldtypeFieldType> {
        const response = await this.v1FieldTypeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create field type
     */
    async v1FieldTypePostRaw(requestParameters: V1FieldTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldtypeFieldType>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling v1FieldTypePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/fieldType`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FieldtypeBodyToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldtypeFieldTypeFromJSON(jsonValue));
    }

    /**
     * Create field type
     */
    async v1FieldTypePost(requestParameters: V1FieldTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldtypeFieldType> {
        const response = await this.v1FieldTypePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
