/* tslint:disable */
/* eslint-disable */
/**
 * Fiber Example API
 * This is a sample swagger for Fiber
 *
 * The version of the OpenAPI document: 1.0
 * Contact: fiber@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GormDeletedAt } from './GormDeletedAt';
import {
    GormDeletedAtFromJSON,
    GormDeletedAtFromJSONTyped,
    GormDeletedAtToJSON,
} from './GormDeletedAt';

/**
 * 
 * @export
 * @interface ContentContent
 */
export interface ContentContent {
    /**
     * 
     * @type {string}
     * @memberof ContentContent
     */
    createdAt?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ContentContent
     */
    deletedAt?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof ContentContent
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ContentContent
     */
    modelId: number;
    /**
     * 
     * @type {string}
     * @memberof ContentContent
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ContentContent
     */
    updatedAt?: string;
    /**
     * 
     * @type {number}
     * @memberof ContentContent
     */
    userId: number;
}

/**
 * Check if a given object implements the ContentContent interface.
 */
export function instanceOfContentContent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "modelId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "userId" in value;

    return isInstance;
}

export function ContentContentFromJSON(json: any): ContentContent {
    return ContentContentFromJSONTyped(json, false);
}

export function ContentContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentContent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'deletedAt': !exists(json, 'deletedAt') ? undefined : GormDeletedAtFromJSON(json['deletedAt']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'modelId': json['modelId'],
        'name': json['name'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'userId': json['userId'],
    };
}

export function ContentContentToJSON(value?: ContentContent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createdAt': value.createdAt,
        'deletedAt': GormDeletedAtToJSON(value.deletedAt),
        'id': value.id,
        'modelId': value.modelId,
        'name': value.name,
        'updatedAt': value.updatedAt,
        'userId': value.userId,
    };
}

