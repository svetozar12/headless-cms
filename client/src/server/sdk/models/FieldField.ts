/* tslint:disable */
/* eslint-disable */
/**
 * Fiber Example API
 * This is a sample swagger for Fiber
 *
 * The version of the OpenAPI document: 1.0
 * Contact: fiber@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GormDeletedAt } from './GormDeletedAt';
import {
    GormDeletedAtFromJSON,
    GormDeletedAtFromJSONTyped,
    GormDeletedAtToJSON,
} from './GormDeletedAt';

/**
 * 
 * @export
 * @interface FieldField
 */
export interface FieldField {
    /**
     * 
     * @type {number}
     * @memberof FieldField
     */
    contentId: number;
    /**
     * 
     * @type {string}
     * @memberof FieldField
     */
    createdAt?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof FieldField
     */
    deletedAt?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof FieldField
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FieldField
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof FieldField
     */
    typeId: number;
    /**
     * 
     * @type {string}
     * @memberof FieldField
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldField
     */
    value?: string;
}

/**
 * Check if a given object implements the FieldField interface.
 */
export function instanceOfFieldField(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contentId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "typeId" in value;

    return isInstance;
}

export function FieldFieldFromJSON(json: any): FieldField {
    return FieldFieldFromJSONTyped(json, false);
}

export function FieldFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldField {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contentId': json['contentId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'deletedAt': !exists(json, 'deletedAt') ? undefined : GormDeletedAtFromJSON(json['deletedAt']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'typeId': json['typeId'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function FieldFieldToJSON(value?: FieldField | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contentId': value.contentId,
        'createdAt': value.createdAt,
        'deletedAt': GormDeletedAtToJSON(value.deletedAt),
        'id': value.id,
        'name': value.name,
        'typeId': value.typeId,
        'updatedAt': value.updatedAt,
        'value': value.value,
    };
}

