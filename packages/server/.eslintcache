[{"E:\\coding_journey\\headless-cms\\packages\\server\\jest.config.ts":"1","E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\errorModel.ts":"2","E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\schema.ts":"3","E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\types.d.ts":"4","E:\\coding_journey\\headless-cms\\packages\\server\\src\\env\\schema.ts":"5","E:\\coding_journey\\headless-cms\\packages\\server\\src\\env\\server.ts":"6","E:\\coding_journey\\headless-cms\\packages\\server\\src\\index.ts":"7","E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\errorHandler.ts":"8","E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\isAuth.ts":"9","E:\\coding_journey\\headless-cms\\packages\\server\\src\\preinit.ts":"10","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\auth.ts":"11","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\index.ts":"12","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\schema.ts":"13","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\utils.ts":"14","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\content.schema.ts":"15","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\content.ts":"16","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\index.ts":"17","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\contentModel.schema.ts":"18","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\contentModel.ts":"19","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\index.ts":"20","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\health\\health.ts":"21","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\health\\index.ts":"22","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\index.ts":"23","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\index.ts":"24","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\schema.ts":"25","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\user.ts":"26","E:\\coding_journey\\headless-cms\\packages\\server\\src\\types\\express\\index.d.ts":"27","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\checkContentTypes.ts":"28","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\getAvatar.ts":"29","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\logger.ts":"30","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\content.ts":"31","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\contentModel.ts":"32","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\preMiddleware.ts":"33","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\user.ts":"34","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\prisma.ts":"35","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\withPagination.ts":"36","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\zParse.ts":"37","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\auth\\auth.test.ts":"38","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\content\\content.test.ts":"39","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\contentModel\\contentModel.test.ts":"40","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\jest.setup.ts":"41","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\user\\user.test.ts":"42","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\utils.ts":"43","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\fieldType\\fieldType.schema.ts":"44","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\fieldType\\fieldType.ts":"45","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\fieldType\\index.ts":"46","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\field\\field.schema.ts":"47","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\field\\field.ts":"48","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\field\\index.ts":"49"},{"size":185,"mtime":1670700005205,"results":"50","hashOfConfig":"51"},{"size":1497,"mtime":1670700005205,"results":"52","hashOfConfig":"51"},{"size":1063,"mtime":1670701575257,"results":"53","hashOfConfig":"51"},{"size":59,"mtime":1670700005205,"results":"54","hashOfConfig":"51"},{"size":510,"mtime":1670708780616,"results":"55","hashOfConfig":"51"},{"size":609,"mtime":1670700005205,"results":"56","hashOfConfig":"51"},{"size":643,"mtime":1670700005205,"results":"57","hashOfConfig":"51"},{"size":966,"mtime":1670700005205,"results":"58","hashOfConfig":"51"},{"size":747,"mtime":1670700005205,"results":"59","hashOfConfig":"51"},{"size":171,"mtime":1670700005205,"results":"60","hashOfConfig":"51"},{"size":2000,"mtime":1670700005205,"results":"61","hashOfConfig":"51"},{"size":34,"mtime":1670700005205,"results":"62","hashOfConfig":"51"},{"size":631,"mtime":1670700005205,"results":"63","hashOfConfig":"51"},{"size":1274,"mtime":1670700005205,"results":"64","hashOfConfig":"51"},{"size":954,"mtime":1670710211030,"results":"65","hashOfConfig":"51"},{"size":3223,"mtime":1670825539130,"results":"66","hashOfConfig":"51"},{"size":37,"mtime":1670700005205,"results":"67","hashOfConfig":"51"},{"size":597,"mtime":1670848891829,"results":"68","hashOfConfig":"51"},{"size":3180,"mtime":1670848963787,"results":"69","hashOfConfig":"51"},{"size":42,"mtime":1670701620001,"results":"70","hashOfConfig":"51"},{"size":246,"mtime":1670700005205,"results":"71","hashOfConfig":"51"},{"size":36,"mtime":1670700005205,"results":"72","hashOfConfig":"51"},{"size":1031,"mtime":1670820478578,"results":"73","hashOfConfig":"51"},{"size":34,"mtime":1670700005205,"results":"74","hashOfConfig":"51"},{"size":281,"mtime":1670700005205,"results":"75","hashOfConfig":"51"},{"size":2597,"mtime":1670700005205,"results":"76","hashOfConfig":"51"},{"size":464,"mtime":1670700005205,"results":"77","hashOfConfig":"51"},{"size":279,"mtime":1670700114222,"results":"78","hashOfConfig":"51"},{"size":432,"mtime":1670700005205,"results":"79","hashOfConfig":"51"},{"size":259,"mtime":1670700005205,"results":"80","hashOfConfig":"51"},{"size":579,"mtime":1670700005205,"results":"81","hashOfConfig":"51"},{"size":682,"mtime":1670700005205,"results":"82","hashOfConfig":"51"},{"size":1054,"mtime":1670700005205,"results":"83","hashOfConfig":"51"},{"size":595,"mtime":1670700005205,"results":"84","hashOfConfig":"51"},{"size":488,"mtime":1670700005205,"results":"85","hashOfConfig":"51"},{"size":199,"mtime":1670700005205,"results":"86","hashOfConfig":"51"},{"size":1084,"mtime":1670700005205,"results":"87","hashOfConfig":"51"},{"size":3806,"mtime":1670700005205,"results":"88","hashOfConfig":"51"},{"size":4136,"mtime":1670700005205,"results":"89","hashOfConfig":"51"},{"size":6862,"mtime":1670700005205,"results":"90","hashOfConfig":"51"},{"size":72,"mtime":1670700005205,"results":"91","hashOfConfig":"51"},{"size":4058,"mtime":1670700005205,"results":"92","hashOfConfig":"51"},{"size":511,"mtime":1670700005205,"results":"93","hashOfConfig":"51"},{"size":692,"mtime":1670704198606,"results":"94","hashOfConfig":"51"},{"size":2042,"mtime":1670822171858,"results":"95","hashOfConfig":"51"},{"size":39,"mtime":1670701365602,"results":"96","hashOfConfig":"51"},{"size":344,"mtime":1670820444073,"results":"97","hashOfConfig":"51"},{"size":859,"mtime":1670820444073,"results":"98","hashOfConfig":"51"},{"size":35,"mtime":1670772140207,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hpe0na",{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\coding_journey\\headless-cms\\packages\\server\\jest.config.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\errorModel.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\types.d.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\env\\schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\env\\server.ts",["265"],[],"// @ts-check\nimport { config } from \"dotenv\";\n\nconfig();\n\nimport { serverSchema } from \"./schema\";\nimport logger from \"../utils/logger\";\nconst _serverEnv = serverSchema.safeParse(process.env);\n\nif (!_serverEnv.success) {\n  logger([\"❌ Invalid environment variables:\\n\", _serverEnv.error]);\n  const {\n    error: { issues },\n  } = _serverEnv;\n  issues.forEach((issue) => {\n    throw new Error(`Invalid environment variables ${issue.message}`);\n  });\n}\n\nconst _ = _serverEnv.success;\n\nconst temp = { _serverEnv };\n\nexport const env = temp._serverEnv.success\n  ? temp._serverEnv.data\n  : serverSchema.parse({});\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\errorHandler.ts",["266"],[],"import { ErrorRequestHandler, NextFunction, Request, Response } from \"express\";\nimport logger from \"../utils/logger\";\nimport { CustomError } from \"../common/errorModel\";\nimport { ZodError } from \"zod\";\n\n/**\n * Custom error handler to standardize error objects returned to\n * the client\n *\n * @param err Error caught by Express.js\n * @param req Request object provided by Express\n * @param res Response object provided by Express\n * @param next NextFunction function provided by Express\n */\n\nconst handleError = (\n  err: ErrorRequestHandler,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  logger([err, \"errorHandler\"]);\n\n  if (err instanceof CustomError) {\n    return res.status(err.status).json({ message: err.message });\n  }\n  if (err instanceof ZodError) {\n    return res.status(400).json({ message: err.message });\n  }\n\n  logger([\"error\", err]);\n  return res.status(500).json({ Message: \"Internal server error\" });\n};\n\nexport default handleError;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\isAuth.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\preinit.ts",["267"],[],"import { NextFunction, Request, Response } from \"express\";\n\nexport const init = (res: Response, req: Request, next: NextFunction) => {\n  req.pre = {} as any;\n  next();\n};\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\auth.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\utils.ts",["268","269","270","271","272","273"],[],"import jwt, { decode, JwtPayload } from \"jsonwebtoken\";\nimport { env } from \"../../env/server\";\nimport { Request, Response, NextFunction } from \"express\";\nimport logger from \"../../utils/logger\";\n\nexport enum jwtType {\n  ACCESS = \"access\",\n  REFRESH = \"refresh\",\n}\n\nconst signToken = (\n  type: jwtType,\n  payload: Record<string, any>,\n  expiresIn: number\n): Promise<string> => {\n  const secret =\n    type === jwtType.ACCESS\n      ? env.JWT_ACCESS_TOKEN_SECRET\n      : env.JWT_REFRESH_TOKEN_SECRET;\n  return new Promise((resolve, reject) => {\n    jwt.sign(payload, secret, { expiresIn }, (err, token) => {\n      if (err) {\n        logger([\"error\", err]);\n        return reject(\n          new Error(\"Error while signing token. Please try again later.\")\n        );\n      }\n\n      return resolve(token as string);\n    });\n  });\n};\n\nconst verifyToken = (type: jwtType, token: string) => {\n  const secret =\n    type === jwtType.ACCESS\n      ? env.JWT_ACCESS_TOKEN_SECRET\n      : env.JWT_REFRESH_TOKEN_SECRET;\n  let user: JwtPayload | boolean | string | undefined;\n\n  // @ts-ignore\n  jwt.verify(token, secret, (err, decoded) => {\n    if (err) {\n      logger([\"error\", err]);\n      user = false;\n    }\n    user = decoded;\n  });\n  return user;\n};\n\nexport { signToken, verifyToken };\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\content.schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\content.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\contentModel.schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\contentModel.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\health\\health.ts",["274","275"],[],"import { Router } from \"express\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport { jwtType } from \"../auth/utils\";\n\nconst health = Router();\nhealth.get(\"/\", (req, res) => {\n  return res.json({ message: \"ok\" });\n});\n\nexport default health;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\health\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\index.ts",["276"],[],"import health from \"./health\";\nimport { Application, NextFunction, Request, Response, Router } from \"express\";\n// routes\nimport auth from \"./auth\";\nimport user from \"./user\";\nimport contentModel from \"./contentModel\";\nimport content from \"./content\";\n// middlewares\nimport isAuth from \"../middlewares/isAuth\";\nimport { jwtType } from \"./auth/utils\";\n\ninterface IRoute {\n  path: string;\n  router: Router;\n  middlewares?: Array<(req: Request, res: Response, next: NextFunction) => any>;\n}\n\nconst routes: IRoute[] = [\n  { path: \"/health\", router: health },\n  { path: \"/auth\", router: auth },\n  { path: \"/user\", router: user },\n  {\n    path: \"/contentModel\",\n    router: contentModel,\n    middlewares: [isAuth(jwtType.ACCESS)],\n  },\n  { path: \"/content\", router: content },\n];\n\nconst initRoutes = (app: Application) => {\n  routes.forEach((route) => {\n    const { path, router, middlewares } = route;\n    if (middlewares) return app.use(path, middlewares, router);\n    return app.use(path, router);\n  });\n};\n\nexport default initRoutes;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\user.ts",["277","278","279","280","281","282"],[],"import { Router } from \"express\";\nimport { updateUserSchema, userSchema } from \"./schema\";\nimport { zMiddleware, zParse } from \"../../utils/zParse\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport { jwtType, signToken } from \"../auth/utils\";\nimport { commonUserSchema } from \"../../common/schema\";\nimport { prisma } from \"../../utils/prisma\";\nimport { env } from \"../../env/server\";\nimport { preResource, Resource } from \"../../utils/pre/preMiddleware\";\nimport { getAvatar } from \"../../utils/getAvatar\";\n\nconst user = Router();\n\nuser.get(\n  \"/me\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const { user } = req.pre;\n    return res.status(200).json(user);\n  }\n);\n\nuser.post(\"/\", zMiddleware(userSchema), async (req, res, next) => {\n  const {\n    body: { username, password },\n  } = await zParse(userSchema, req);\n  const isUserExist = await prisma.user.findFirst({\n    where: { username },\n  });\n  if (isUserExist)\n    return res.status(409).json({ message: \"User already exist\" });\n\n  const user = await prisma.user.create({\n    data: { username, password, avatar: getAvatar(\"identicon\") },\n  });\n  const accessToken = await signToken(\n    jwtType.ACCESS,\n    { id: user.id, username },\n    parseInt(env.JWT_ACCESS_TOKEN_EXPIRES_IN)\n  );\n\n  const refreshToken = await signToken(\n    jwtType.REFRESH,\n    { id: user.id, username },\n    parseInt(env.JWT_REFRESH_TOKEN_EXPIRES_IN)\n  );\n  const { password: _, ...userObj } = user;\n  return res.status(201).json({ user: userObj, accessToken, refreshToken });\n});\n\nuser.put(\n  \"/me\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(updateUserSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const {\n      body: { username },\n    } = await zParse(updateUserSchema, req);\n    const { user: preUser } = req.pre;\n    const { id, username: preUsername } = req.pre.user;\n    const noUpdatesReq = !!username;\n    if (username === preUsername || !noUpdatesReq)\n      return res.status(409).json({ message: \"User wasn't updated\" });\n    const updatedUser = await prisma.user.update({\n      where: {\n        id,\n      },\n      data: {\n        username: username,\n      },\n    });\n    return res.status(201).json({ user: updatedUser });\n  }\n);\n\nuser.delete(\n  \"/me\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const { user } = req.pre;\n    const { id } = user;\n    await prisma.user.delete({ where: { id } });\n    return res.status(204).send();\n  }\n);\n\nexport default user;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\types\\express\\index.d.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\checkContentTypes.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\getAvatar.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\logger.ts",[],["283"],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\content.ts",["284"],[],"import { prisma } from \"../prisma\";\nimport { Request } from \"express\";\nimport contentModel from \"./contentModel\";\nimport { CustomError } from \"../../common/errorModel\";\nimport logger from \"../logger\";\n\nexport const preContent = async (req: Request): Promise<void> => {\n  await contentModel(req);\n  const { model } = req.pre;\n  const content = await prisma.content.findFirst({\n    where: { contentModelId: model.id },\n  });\n  //@ts-ignore\n  if (!content) return CustomError.notFound(\"You don't have content !\");\n  logger([content, \"biggerstas\"]);\n\n  req.pre.content = content;\n};\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\contentModel.ts",["285"],[],"import { prisma } from \"../prisma\";\nimport { Request } from \"express\";\nimport { zParse } from \"../zParse\";\nimport { commonIdParamSchema, commonUserSchema } from \"../../common/schema\";\nimport { CustomError } from \"../../common/errorModel\";\n\nconst contentModel = async (req: Request): Promise<void> => {\n  const {\n    user: { id },\n    params: { id: modelId },\n  } = await zParse(commonUserSchema.merge(commonIdParamSchema), req);\n\n  const model = await prisma.contentModel.findFirst({\n    where: { userId: id, id: modelId },\n  });\n\n  //@ts-ignore\n  if (!model) return CustomError.notFound(\"You don't have content models !\");\n  req.pre.model = model;\n};\n\nexport default contentModel;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\preMiddleware.ts",["286"],[],"import { NextFunction, Request, Response } from \"express\";\nimport userMe from \"./user\";\nimport contentModel from \"./contentModel\";\nimport { CustomError } from \"../../common/errorModel\";\nimport { preContent } from \"./content\";\n\nexport enum Resource {\n  User = \"user\",\n  ContentModel = \"contentModel\",\n  Content = \"content\",\n}\n\n/**\n * Checks if resource is throwing error*/\nexport const preResource = (resources: Resource[]) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    let resourceResult: any;\n    for (const resource of resources) {\n      switch (resource) {\n        case Resource.User:\n          resourceResult = await userMe(req);\n          if (resourceResult instanceof CustomError) next(resourceResult);\n          break;\n        case Resource.ContentModel:\n          resourceResult = await contentModel(req);\n          if (resourceResult instanceof CustomError) next(resourceResult);\n          break;\n        case Resource.Content:\n          resourceResult = await preContent(req);\n      }\n    }\n    next();\n  };\n};\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\user.ts",["287","288"],[],"import { zParse } from \"../zParse\";\nimport { commonUserSchema } from \"../../common/schema\";\nimport { prisma } from \"../prisma\";\nimport { Request } from \"express\";\nimport { CustomError } from \"../../common/errorModel\";\n\nconst userMe = async (req: Request): Promise<void> => {\n  const {\n    user: { id },\n  } = await zParse(commonUserSchema, req);\n\n  const user = await prisma.user.findFirst({ where: { id } });\n  // @ts-ignore\n  if (!user) return CustomError.notFound(\"User doesn't exist\");\n\n  const { password, ...userObj } = user;\n  req.pre.user = userObj;\n  return;\n};\n\nexport default userMe;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\prisma.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\withPagination.ts",["289"],[],"import logger from \"./logger\";\n\nexport const withPagination = (\n  page: number,\n  pageSize: number\n): { skip: number; take: number } => {\n  return { skip: (page - 1) * pageSize, take: pageSize };\n};\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\zParse.ts",["290"],[],"import type { NextFunction, Request, Response } from \"express\";\nimport { AnyZodObject, z } from \"zod\";\nimport { CustomError } from \"../common/errorModel\";\nimport logger from \"./logger\";\n\nconst zParse = async <T extends AnyZodObject>(\n  schema: T,\n  req: Request\n): Promise<z.infer<T>> => {\n  const zSchema = await schema.safeParseAsync(req);\n  if (!zSchema.success)\n    return CustomError.badRequest(zSchema.error.message) as any;\n  return zSchema.data;\n};\n\n// zod middleware to validate schema before parsing\nconst zMiddleware = <T extends AnyZodObject>(schema: T) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const zSchema = await schema.safeParseAsync(req);\n    if (!zSchema.success) {\n      const {\n        error: { issues },\n      } = zSchema;\n      logger([\"zMiddleware\", \"error\", issues]);\n      issues.forEach((issue) => {\n        logger([\"zMiddleware\", issue.message]);\n        next(\n          CustomError.badRequest(`${issue.message} ${issue.path.join(\".\")}`)\n        );\n      });\n    }\n    next();\n  };\n};\n\nexport { zParse, zMiddleware };\n","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\auth\\auth.test.ts",["291"],[],"import { makeTestRequest } from \"../utils\";\n\nlet user;\nlet tokens: { accessToken: string; refreshToken: string };\nconst testUser = {\n  username: \"test\",\n  password: \"test\",\n};\nconst zodTestCases = [\n  {\n    body: {\n      username: 1,\n      password: \"string\",\n      grant_type: \"password\",\n    },\n    expect: \"Expected string, received number body.username\",\n  },\n  {\n    body: {\n      username: \"string\",\n      password: 1,\n      grant_type: \"password\",\n    },\n    expect: \"Expected string, received number body.password\",\n  },\n  {\n    body: {\n      ...testUser,\n      grant_type: 1,\n    },\n    expect:\n      \"Expected 'password' | 'refresh_token', received number body.grant_type\",\n  },\n  {\n    body: {\n      refreshToken: 1,\n      grant_type: \"refresh_token\",\n    },\n    expect: \"Expected string, received number body.refreshToken\",\n  },\n  {\n    body: { refreshToken: \"dawdaw\", grant_type: 1 },\n    expect:\n      \"Expected 'password' | 'refresh_token', received number body.grant_type\",\n  },\n];\n\nbeforeAll(async () => {\n  const token = await makeTestRequest(\"post\", \"/user\", testUser);\n  const { user: User } = token.body;\n  user = User;\n\n  tokens = {\n    accessToken: token.body.accessToken,\n    refreshToken: token.body.refreshToken,\n  };\n});\nafterAll(async () => {\n  const { accessToken } = tokens;\n  await makeTestRequest(\"delete\", \"/user/me\", undefined, accessToken);\n});\n\ndescribe(\"/auth\", () => {\n  describe(\"POST\", () => {\n    describe(\"/\", () => {\n      it(\"should return AccessToken and RefreshToken(201) grant_type=password\", async () => {\n        const expectedProperties = [\"accessToken\", \"refreshToken\"];\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          ...testUser,\n          grant_type: \"password\",\n        });\n        expectedProperties.forEach((property) => {\n          expect(res.body).toHaveProperty(property);\n          expect(typeof res.body[property]).toBe(\"string\");\n          expect(res.body[property].length > 0).toBe(true);\n        });\n        expect(res.status).toBe(201);\n      });\n      // todo -fix\n      it(\"should return AccessToken and RefreshToken(201) grant_type=refresh_token\", async () => {\n        const expectedProperties = [\"accessToken\", \"refreshToken\"];\n        const { refreshToken } = tokens;\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          grant_type: \"refresh_token\",\n          refreshToken,\n        });\n\n        expectedProperties.forEach((property) => {\n          expect(res.body).toHaveProperty(property);\n          expect(typeof res.body[property]).toBe(\"string\");\n          expect(res.body[property].length > 0).toBe(true);\n        });\n        expect(res.status).toBe(201);\n      });\n      for (const testCase of zodTestCases) {\n        const { body, expect: message } = testCase;\n        it(`testing zod schema with body: ${JSON.stringify(\n          body,\n          undefined\n        )}`, async () => {\n          const res = await makeTestRequest(\"post\", \"/auth\", body);\n          expect(res.body.message).toBe(message);\n          expect(res.status).toBe(400);\n        });\n      }\n      it(\"should return Not Found(404) grant_type=password\", async () => {\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          username: \"nonExistent\",\n          password: \"nonExistent\",\n          grant_type: \"password\",\n        });\n        expect(res.body.message).toBe(\"User doesn't exist\");\n        expect(res.status).toBe(404);\n      });\n\n      it(\"should return Not Found(404) grant_type=refresh_token\", async () => {\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          refreshToken: \"invalidToken\",\n          grant_type: \"refresh_token\",\n        });\n        expect(res.body.message).toBe(\"Invalid refresh token\");\n        expect(res.status).toBe(401);\n      });\n    });\n  });\n});\n","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\content\\content.test.ts",["292","293","294","295"],[],"import { makeTestRequest } from \"../utils\";\nimport { Content, ContentModel } from \"../../src/utils/prisma\";\nimport logger from \"../../src/utils/logger\";\n\ndescribe(\"content\", () => {\n  let tokens: { accessToken: string; refreshToken: string };\n  let contentModel: ContentModel;\n  let content: Content;\n  beforeAll(async () => {\n    await makeTestRequest(\"post\", \"/user\", {\n      username: \"test\",\n      password: \"test\",\n    }).then((res) => {\n      const { accessToken, refreshToken } = res.body;\n      tokens = { accessToken, refreshToken };\n    });\n    const { accessToken } = tokens;\n    await makeTestRequest(\n      \"post\",\n      \"/contentModel\",\n      {\n        json: \"true\",\n        text: \"true\",\n        number: \"true\",\n      },\n      accessToken\n    ).then((res) => {\n      contentModel = res.body.contentModel;\n    });\n    await makeTestRequest(\n      \"post\",\n      \"/content\",\n      {\n        contentModelId: contentModel.id,\n        json: JSON.stringify({ test: \"test\" }),\n        text: \"some random string\",\n        number: 42,\n      },\n      accessToken\n    ).then((res) => {\n      content = res.body.content;\n    });\n  });\n\n  afterAll(async () => {\n    const { accessToken } = tokens;\n    await makeTestRequest(\"delete\", \"/user/me\", {}, accessToken);\n  });\n\n  describe(\"GET\", () => {\n    describe(\"/content\", () => {\n      it(\"should return 200\", async () => {\n        const { accessToken } = tokens;\n        const res = await makeTestRequest(\"get\", \"/content\", {}, accessToken);\n        expect(res.status).toBe(200);\n        expect(res.body).toEqual({ content: [content] });\n      });\n      it(\"should return 401 without token\", async () => {\n        const res = await makeTestRequest(\"get\", \"/content\");\n        expect(res.status).toBe(401);\n        expect(res.body).toEqual({ message: \"Unauthorized\" });\n      });\n      it(\"should return 404 without content\", () => {\n        const { accessToken } = tokens;\n        makeTestRequest(\n          \"delete\",\n          `/content/${content.id}`,\n          { contentModelId: contentModel.id },\n          accessToken\n        ).then(async (val) => {\n          const res = await makeTestRequest(\"get\", \"/content\", {}, accessToken);\n          expect(res.status).toBe(404);\n          expect(res.body).toEqual({ message: \"Content not found\" });\n        });\n      });\n    });\n  });\n  describe(\"POST\", () => {\n    describe(\"/content\", () => {\n      it(\"should return 201\", async () => {\n        const expectProps: { prop: string; value: any }[] = [\n          { prop: \"json\", value: { german: \"12\" } },\n          { prop: \"text\", value: null },\n          { prop: \"number\", value: null },\n        ];\n        const { accessToken } = tokens;\n        const res = await makeTestRequest(\n          \"post\",\n          \"/content\",\n          {\n            contentModelId: contentModel.id,\n            json: JSON.stringify({ german: \"12\" }),\n          },\n          accessToken\n        );\n        expectProps.forEach(({ prop, value }) => {\n          expect(res.body.content[prop]).toEqual(value);\n        });\n        expect(res.status).toBe(201);\n        await makeTestRequest(\n          \"delete\",\n          `/content/${contentModel.id}`,\n          accessToken\n        );\n      });\n      it(\"should return 401 without token\", async () => {\n        const res = await makeTestRequest(\"post\", \"/content\", {\n          contentModelId: contentModel.id,\n          json: JSON.stringify({ german: \"12\" }),\n        });\n        expect(res.status).toBe(401);\n        expect(res.body).toEqual({ message: \"Unauthorized\" });\n      });\n      const testCaseTypes = [\n        {\n          model: { json: true },\n          content: { json: JSON.stringify({ hallo: \"12\" }) },\n        },\n        {\n          model: { json: true, text: true },\n          content: {\n            json: JSON.stringify({ hallo: \"12\" }),\n            text: \"random text\",\n          },\n        },\n        {\n          model: { json: true, text: true, number: true },\n          content: {\n            json: JSON.stringify({ hallo: \"12\" }),\n            text: \"random text\",\n            number: 12,\n          },\n        },\n      ];\n    });\n  });\n});\n","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\contentModel\\contentModel.test.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\tests\\jest.setup.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\tests\\user\\user.test.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\tests\\utils.ts",["296","297"],[],"import app from \"../src/index\";\nimport request from \"supertest\";\n\nconst instance = request(app);\n\nexport const makeTestRequest = (\n  method: string,\n  url: string,\n  data?: any,\n  jwtToken?: string\n): Promise<any> => {\n  if (jwtToken)\n    return instance[method](url)\n      .set({\n        Authorization: `Bearer ${jwtToken}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      })\n      .send(data);\n  return instance[method](url)\n    .set(\"Content-Type\", \"application/json\")\n    .send(data);\n};\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\fieldType\\fieldType.schema.ts",["298","299","300"],[],"import { FieldType, FieldTypeEnum } from \"@prisma/client\";\nimport { z, ZodType } from \"zod\";\nimport {\n  commonIdParamSchema,\n  fieldType,\n  parseStringToInt,\n} from \"../../../common/schema\";\n\nexport const createFieldType = z.object({\n  body: z.object({\n    title: z.string(),\n    type: fieldType,\n    modelId: parseStringToInt,\n  }),\n});\n\nexport const updateFieldType = z\n  .object({\n    body: z.object({\n      modelId: parseStringToInt,\n      title: z.string().optional(),\n    }),\n  })\n  .merge(commonIdParamSchema)\n  .merge(commonIdParamSchema);\n\nexport const deleteFieldType = z\n  .object({\n    body: z.object({\n      modelId: parseStringToInt,\n    }),\n  })\n  .merge(commonIdParamSchema);\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\fieldType\\fieldType.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\fieldType\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\field\\field.schema.ts",["301","302"],[],"import { FieldType, FieldTypeEnum } from \"@prisma/client\";\nimport { z } from \"zod\";\nimport { parseStringToInt } from \"../../../common/schema\";\n\nexport const updateFieldList = z.object({\n  body: z.object({\n    contentId: parseStringToInt,\n    fields: z.array(\n      z.object({ id: parseStringToInt, value: z.any().optional() })\n    ),\n  }),\n});\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\field\\field.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\field\\index.ts",[],[],{"ruleId":"303","severity":1,"message":"304","line":20,"column":7,"nodeType":"305","messageId":"306","endLine":20,"endColumn":8},{"ruleId":"303","severity":1,"message":"307","line":20,"column":3,"nodeType":"305","messageId":"306","endLine":20,"endColumn":21},{"ruleId":"308","severity":1,"message":"309","line":4,"column":19,"nodeType":"310","messageId":"311","endLine":4,"endColumn":22,"suggestions":"312"},{"ruleId":"303","severity":1,"message":"313","line":1,"column":15,"nodeType":"305","messageId":"306","endLine":1,"endColumn":21},{"ruleId":"303","severity":1,"message":"314","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":17},{"ruleId":"303","severity":1,"message":"315","line":3,"column":19,"nodeType":"305","messageId":"306","endLine":3,"endColumn":27},{"ruleId":"303","severity":1,"message":"316","line":3,"column":29,"nodeType":"305","messageId":"306","endLine":3,"endColumn":41},{"ruleId":"308","severity":1,"message":"309","line":13,"column":27,"nodeType":"310","messageId":"311","endLine":13,"endColumn":30,"suggestions":"317"},{"ruleId":"318","severity":1,"message":"319","line":41,"column":3,"nodeType":"320","messageId":"321","endLine":41,"endColumn":16},{"ruleId":"303","severity":1,"message":"322","line":2,"column":8,"nodeType":"305","messageId":"306","endLine":2,"endColumn":14},{"ruleId":"303","severity":1,"message":"323","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":17},{"ruleId":"308","severity":1,"message":"309","line":15,"column":76,"nodeType":"310","messageId":"311","endLine":15,"endColumn":79,"suggestions":"324"},{"ruleId":"303","severity":1,"message":"307","line":19,"column":20,"nodeType":"305","messageId":"306","endLine":19,"endColumn":24},{"ruleId":"303","severity":1,"message":"307","line":25,"column":58,"nodeType":"305","messageId":"306","endLine":25,"endColumn":62},{"ruleId":"303","severity":1,"message":"304","line":49,"column":21,"nodeType":"305","messageId":"306","endLine":49,"endColumn":22},{"ruleId":"303","severity":1,"message":"307","line":58,"column":20,"nodeType":"305","messageId":"306","endLine":58,"endColumn":24},{"ruleId":"303","severity":1,"message":"325","line":62,"column":19,"nodeType":"305","messageId":"306","endLine":62,"endColumn":26},{"ruleId":"303","severity":1,"message":"307","line":84,"column":20,"nodeType":"305","messageId":"306","endLine":84,"endColumn":24},{"ruleId":"326","severity":2,"message":"327","line":5,"column":3,"nodeType":"328","messageId":"329","endLine":5,"endColumn":14,"suppressions":"330"},{"ruleId":"318","severity":1,"message":"319","line":13,"column":3,"nodeType":"320","messageId":"321","endLine":13,"endColumn":15},{"ruleId":"318","severity":1,"message":"319","line":17,"column":3,"nodeType":"320","messageId":"321","endLine":17,"endColumn":15},{"ruleId":"308","severity":1,"message":"309","line":17,"column":25,"nodeType":"310","messageId":"311","endLine":17,"endColumn":28,"suggestions":"331"},{"ruleId":"318","severity":1,"message":"319","line":13,"column":3,"nodeType":"320","messageId":"321","endLine":13,"endColumn":16},{"ruleId":"303","severity":1,"message":"332","line":16,"column":11,"nodeType":"305","messageId":"306","endLine":16,"endColumn":19},{"ruleId":"303","severity":1,"message":"333","line":1,"column":8,"nodeType":"305","messageId":"306","endLine":1,"endColumn":14},{"ruleId":"308","severity":1,"message":"309","line":12,"column":61,"nodeType":"310","messageId":"311","endLine":12,"endColumn":64,"suggestions":"334"},{"ruleId":"303","severity":1,"message":"335","line":3,"column":5,"nodeType":"305","messageId":"306","endLine":3,"endColumn":9},{"ruleId":"303","severity":1,"message":"333","line":3,"column":8,"nodeType":"305","messageId":"306","endLine":3,"endColumn":14},{"ruleId":"303","severity":1,"message":"336","line":70,"column":23,"nodeType":"305","messageId":"306","endLine":70,"endColumn":26},{"ruleId":"308","severity":1,"message":"309","line":81,"column":51,"nodeType":"310","messageId":"311","endLine":81,"endColumn":54,"suggestions":"337"},{"ruleId":"303","severity":1,"message":"338","line":114,"column":13,"nodeType":"305","messageId":"306","endLine":114,"endColumn":26},{"ruleId":"308","severity":1,"message":"309","line":9,"column":10,"nodeType":"310","messageId":"311","endLine":9,"endColumn":13,"suggestions":"339"},{"ruleId":"308","severity":1,"message":"309","line":11,"column":12,"nodeType":"310","messageId":"311","endLine":11,"endColumn":15,"suggestions":"340"},{"ruleId":"303","severity":1,"message":"341","line":1,"column":10,"nodeType":"305","messageId":"306","endLine":1,"endColumn":19},{"ruleId":"303","severity":1,"message":"342","line":1,"column":21,"nodeType":"305","messageId":"306","endLine":1,"endColumn":34},{"ruleId":"303","severity":1,"message":"343","line":2,"column":13,"nodeType":"305","messageId":"306","endLine":2,"endColumn":20},{"ruleId":"303","severity":1,"message":"341","line":1,"column":10,"nodeType":"305","messageId":"306","endLine":1,"endColumn":19},{"ruleId":"303","severity":1,"message":"342","line":1,"column":21,"nodeType":"305","messageId":"306","endLine":1,"endColumn":34},"@typescript-eslint/no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","'next' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["344","345"],"'decode' is defined but never used.","'Request' is defined but never used.","'Response' is defined but never used.","'NextFunction' is defined but never used.",["346","347"],"@typescript-eslint/ban-ts-comment","Do not use \"@ts-ignore\" because it alters compilation errors.","Line","tsDirectiveComment","'isAuth' is defined but never used.","'jwtType' is defined but never used.",["348","349"],"'preUser' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected",["350","351"],["352","353"],"'password' is assigned a value but never used.","'logger' is defined but never used.",["354","355"],"'user' is assigned a value but never used.","'val' is defined but never used.",["356","357"],"'testCaseTypes' is assigned a value but never used.",["358","359"],["360","361"],"'FieldType' is defined but never used.","'FieldTypeEnum' is defined but never used.","'ZodType' is defined but never used.",{"messageId":"362","fix":"363","desc":"364"},{"messageId":"365","fix":"366","desc":"367"},{"messageId":"362","fix":"368","desc":"364"},{"messageId":"365","fix":"369","desc":"367"},{"messageId":"362","fix":"370","desc":"364"},{"messageId":"365","fix":"371","desc":"367"},{"kind":"372","justification":"373"},{"kind":"372","justification":"373"},{"messageId":"362","fix":"374","desc":"364"},{"messageId":"365","fix":"375","desc":"367"},{"messageId":"362","fix":"376","desc":"364"},{"messageId":"365","fix":"377","desc":"367"},{"messageId":"362","fix":"378","desc":"364"},{"messageId":"365","fix":"379","desc":"367"},{"messageId":"362","fix":"380","desc":"364"},{"messageId":"365","fix":"381","desc":"367"},{"messageId":"362","fix":"382","desc":"364"},{"messageId":"365","fix":"383","desc":"367"},"suggestUnknown",{"range":"384","text":"385"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"384","text":"386"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"387","text":"385"},{"range":"387","text":"386"},{"range":"388","text":"385"},{"range":"388","text":"386"},"directive","",{"range":"389","text":"385"},{"range":"389","text":"386"},{"range":"390","text":"385"},{"range":"390","text":"386"},{"range":"391","text":"385"},{"range":"391","text":"386"},{"range":"392","text":"385"},{"range":"392","text":"386"},{"range":"393","text":"385"},{"range":"393","text":"386"},[153,156],"unknown","never",[329,332],[479,482],[522,525],[426,429],[2488,2491],[173,176],[209,212]]