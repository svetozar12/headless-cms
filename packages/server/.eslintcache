[{"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/jest.config.ts":"1","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/common/errorModel.ts":"2","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/common/schema.ts":"3","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/common/types.d.ts":"4","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/env/schema.ts":"5","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/env/server.ts":"6","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/index.ts":"7","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/middlewares/checkContentTypes.ts":"8","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/middlewares/errorHandler.ts":"9","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/middlewares/isAuth.ts":"10","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/preinit.ts":"11","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/auth/auth.ts":"12","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/auth/index.ts":"13","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/auth/schema.ts":"14","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/auth/utils.ts":"15","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/content/content.schema.ts":"16","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/content/content.ts":"17","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/content/index.ts":"18","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/contentModel/contentModel.schema.ts":"19","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/contentModel/contentModel.ts":"20","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/contentModel/index.ts":"21","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/health/health.ts":"22","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/health/index.ts":"23","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/index.ts":"24","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/user/index.ts":"25","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/user/schema.ts":"26","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/user/user.ts":"27","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/types/express/index.d.ts":"28","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/logger.ts":"29","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/pre/content.ts":"30","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/pre/contentModel.ts":"31","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/pre/preMiddleware.ts":"32","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/pre/user.ts":"33","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/prisma.ts":"34","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/withPagination.ts":"35","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/zParse.ts":"36","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/auth/auth.test.ts":"37","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/content/content.test.ts":"38","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/contentModel/contentModel.test.ts":"39","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/jest.setup.ts":"40","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/user/user.test.ts":"41","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/utils.ts":"42","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/getAvatar.ts":"43"},{"size":185,"mtime":1669561920676,"results":"44","hashOfConfig":"45"},{"size":1497,"mtime":1669561920676,"results":"46","hashOfConfig":"45"},{"size":914,"mtime":1670181789475,"results":"47","hashOfConfig":"45"},{"size":59,"mtime":1669561920676,"results":"48","hashOfConfig":"45"},{"size":477,"mtime":1670436610294,"results":"49","hashOfConfig":"45"},{"size":609,"mtime":1669561920676,"results":"50","hashOfConfig":"45"},{"size":643,"mtime":1669561920676,"results":"51","hashOfConfig":"45"},{"size":891,"mtime":1669561920676,"results":"52","hashOfConfig":"45"},{"size":966,"mtime":1669561920676,"results":"53","hashOfConfig":"45"},{"size":747,"mtime":1669561920676,"results":"54","hashOfConfig":"45"},{"size":171,"mtime":1669561920676,"results":"55","hashOfConfig":"45"},{"size":2000,"mtime":1669561920676,"results":"56","hashOfConfig":"45"},{"size":34,"mtime":1669561857375,"results":"57","hashOfConfig":"45"},{"size":631,"mtime":1669561920676,"results":"58","hashOfConfig":"45"},{"size":1274,"mtime":1669561920676,"results":"59","hashOfConfig":"45"},{"size":828,"mtime":1670179396222,"results":"60","hashOfConfig":"45"},{"size":3470,"mtime":1669561920680,"results":"61","hashOfConfig":"45"},{"size":37,"mtime":1669561920680,"results":"62","hashOfConfig":"45"},{"size":648,"mtime":1670178342577,"results":"63","hashOfConfig":"45"},{"size":3279,"mtime":1670179133581,"results":"64","hashOfConfig":"45"},{"size":42,"mtime":1669561920680,"results":"65","hashOfConfig":"45"},{"size":246,"mtime":1669561920680,"results":"66","hashOfConfig":"45"},{"size":36,"mtime":1669561857375,"results":"67","hashOfConfig":"45"},{"size":606,"mtime":1669561920680,"results":"68","hashOfConfig":"45"},{"size":34,"mtime":1669561857375,"results":"69","hashOfConfig":"45"},{"size":281,"mtime":1669561920680,"results":"70","hashOfConfig":"45"},{"size":2597,"mtime":1670438491114,"results":"71","hashOfConfig":"45"},{"size":435,"mtime":1669561920680,"results":"72","hashOfConfig":"45"},{"size":259,"mtime":1669561920680,"results":"73","hashOfConfig":"45"},{"size":579,"mtime":1669561920680,"results":"74","hashOfConfig":"45"},{"size":682,"mtime":1670094611484,"results":"75","hashOfConfig":"45"},{"size":1054,"mtime":1669561920680,"results":"76","hashOfConfig":"45"},{"size":595,"mtime":1669561920680,"results":"77","hashOfConfig":"45"},{"size":488,"mtime":1669561920680,"results":"78","hashOfConfig":"45"},{"size":199,"mtime":1669561920680,"results":"79","hashOfConfig":"45"},{"size":1084,"mtime":1669561920680,"results":"80","hashOfConfig":"45"},{"size":3806,"mtime":1669561920680,"results":"81","hashOfConfig":"45"},{"size":4136,"mtime":1669561920680,"results":"82","hashOfConfig":"45"},{"size":6862,"mtime":1669561920680,"results":"83","hashOfConfig":"45"},{"size":72,"mtime":1669561920680,"results":"84","hashOfConfig":"45"},{"size":4058,"mtime":1669561920680,"results":"85","hashOfConfig":"45"},{"size":511,"mtime":1669561920680,"results":"86","hashOfConfig":"45"},{"size":432,"mtime":1670438882042,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s4buqq",{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/jest.config.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/common/errorModel.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/common/schema.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/common/types.d.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/env/schema.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/env/server.ts",["236"],[],"// @ts-check\nimport { config } from \"dotenv\";\n\nconfig();\n\nimport { serverSchema } from \"./schema\";\nimport logger from \"../utils/logger\";\nconst _serverEnv = serverSchema.safeParse(process.env);\n\nif (!_serverEnv.success) {\n  logger([\"❌ Invalid environment variables:\\n\", _serverEnv.error]);\n  const {\n    error: { issues },\n  } = _serverEnv;\n  issues.forEach((issue) => {\n    throw new Error(`Invalid environment variables ${issue.message}`);\n  });\n}\n\nconst _ = _serverEnv.success;\n\nconst temp = { _serverEnv };\n\nexport const env = temp._serverEnv.success\n  ? temp._serverEnv.data\n  : serverSchema.parse({});\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/index.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/middlewares/checkContentTypes.ts",["237"],[],"import { Request, Response, NextFunction } from \"express\";\nimport { createContentSchema } from \"../routes/content/content.schema\";\nimport { zParse } from \"../utils/zParse\";\n\nexport const checkContentTypes = () => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const { model, content } = req.pre;\n    const {\n      body: { json, text, number },\n    } = await zParse(createContentSchema, req);\n    if (json && model.json !== true)\n      return res\n        .status(400)\n        .json({ message: \"json isn't allowed for this content model\" });\n    if (text && model.text !== true)\n      return res\n        .status(400)\n        .json({ message: \"text isn't allowed for this content model\" });\n    if (number && model.number !== true)\n      return res\n        .status(400)\n        .json({ message: \"number isn't allowed for this content model\" });\n    next();\n  };\n};\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/middlewares/errorHandler.ts",["238"],[],"import { ErrorRequestHandler, NextFunction, Request, Response } from \"express\";\nimport logger from \"../utils/logger\";\nimport { CustomError } from \"../common/errorModel\";\nimport { ZodError } from \"zod\";\n\n/**\n * Custom error handler to standardize error objects returned to\n * the client\n *\n * @param err Error caught by Express.js\n * @param req Request object provided by Express\n * @param res Response object provided by Express\n * @param next NextFunction function provided by Express\n */\n\nconst handleError = (\n  err: ErrorRequestHandler,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  logger([err, \"errorHandler\"]);\n\n  if (err instanceof CustomError) {\n    return res.status(err.status).json({ message: err.message });\n  }\n  if (err instanceof ZodError) {\n    return res.status(400).json({ message: err.message });\n  }\n\n  logger([\"error\", err]);\n  return res.status(500).json({ Message: \"Internal server error\" });\n};\n\nexport default handleError;\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/middlewares/isAuth.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/preinit.ts",["239"],[],"import { NextFunction, Request, Response } from \"express\";\n\nexport const init = (res: Response, req: Request, next: NextFunction) => {\n  req.pre = {} as any;\n  next();\n};\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/auth/auth.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/auth/index.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/auth/schema.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/auth/utils.ts",["240","241","242","243","244","245"],[],"import jwt, { decode, JwtPayload } from \"jsonwebtoken\";\nimport { env } from \"../../env/server\";\nimport { Request, Response, NextFunction } from \"express\";\nimport logger from \"../../utils/logger\";\n\nexport enum jwtType {\n  ACCESS = \"access\",\n  REFRESH = \"refresh\",\n}\n\nconst signToken = (\n  type: jwtType,\n  payload: Record<string, any>,\n  expiresIn: number\n): Promise<string> => {\n  const secret =\n    type === jwtType.ACCESS\n      ? env.JWT_ACCESS_TOKEN_SECRET\n      : env.JWT_REFRESH_TOKEN_SECRET;\n  return new Promise((resolve, reject) => {\n    jwt.sign(payload, secret, { expiresIn }, (err, token) => {\n      if (err) {\n        logger([\"error\", err]);\n        return reject(\n          new Error(\"Error while signing token. Please try again later.\")\n        );\n      }\n\n      return resolve(token as string);\n    });\n  });\n};\n\nconst verifyToken = (type: jwtType, token: string) => {\n  const secret =\n    type === jwtType.ACCESS\n      ? env.JWT_ACCESS_TOKEN_SECRET\n      : env.JWT_REFRESH_TOKEN_SECRET;\n  let user: JwtPayload | boolean | string | undefined;\n\n  // @ts-ignore\n  jwt.verify(token, secret, (err, decoded) => {\n    if (err) {\n      logger([\"error\", err]);\n      user = false;\n    }\n    user = decoded;\n  });\n  return user;\n};\n\nexport { signToken, verifyToken };\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/content/content.schema.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/content/content.ts",["246","247","248","249","250","251","252","253","254"],[],"import { NextFunction, Router } from \"express\";\nimport {\n  commonIdParamSchema,\n  commonUserSchema,\n  paginationSchema,\n} from \"../../common/schema\";\nimport { checkContentTypes } from \"../../middlewares/checkContentTypes\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport { preResource, Resource } from \"../../utils/pre/preMiddleware\";\nimport { prisma, Content } from \"../../utils/prisma\";\nimport { withPagination } from \"../../utils/withPagination\";\nimport { zMiddleware, zParse } from \"../../utils/zParse\";\nimport { jwtType } from \"../auth/utils\";\nimport {\n  createContentSchema,\n  deleteContentSchema,\n  updateContentSchema,\n} from \"./content.schema\";\n\nconst content = Router();\n\ncontent.get(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  preResource([Resource.User, Resource.ContentModel]),\n  async (req, res, next: NextFunction) => {\n    const {\n      query: { page, pageSize },\n    } = await zParse(paginationSchema, req);\n\n    const { model } = req.pre;\n    const { id } = model;\n    const totalContent = await prisma.content.count();\n    const content = await prisma.content.findMany({\n      where: { contentModelId: id },\n      ...withPagination(page, pageSize),\n    });\n\n    return res\n      .status(200)\n      .json({ content, pagination: { page, pageSize, total: totalContent } });\n  }\n);\n\ncontent.get(\n  \"/:id\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema.merge(commonIdParamSchema)),\n  preResource([Resource.ContentModel]),\n  async (req, res, next: NextFunction) => {\n    const {\n      params: { id },\n    } = await zParse(commonIdParamSchema, req);\n    const { model } = req.pre;\n    const content = await prisma.content.findMany({\n      where: { id, contentModelId: model!.id },\n    });\n\n    return res.status(200).json({ content });\n  }\n);\n\ncontent.post(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(createContentSchema),\n  preResource([Resource.ContentModel]),\n  checkContentTypes(),\n  async (req, res, next) => {\n    const { body } = await zParse(createContentSchema, req);\n    const { model } = req.pre;\n\n    const content = await prisma.content.create({\n      data: {\n        ...body,\n        contentModelId: model.id,\n      },\n    });\n\n    return res.status(201).json({ content });\n  }\n);\n\ncontent.put(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(updateContentSchema),\n  preResource([Resource.Content]),\n  checkContentTypes(),\n  async (req, res, next) => {\n    const {\n      body: { title, text, json, number },\n    } = await zParse(updateContentSchema, req);\n    const {\n      content: {\n        id,\n        title: preTitle,\n        text: preText,\n        json: preJson,\n        number: preNumber,\n      },\n    } = req.pre;\n\n    const updateContent = await prisma.content.update({\n      where: {\n        id,\n      },\n      data: {\n        title: title || preTitle,\n        text: text || preText,\n        number: number || preNumber,\n        json: json || preJson,\n      },\n    });\n    return res.status(201).json({ content: updateContent });\n  }\n);\n\ncontent.delete(\n  \"/:id\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema.merge(commonIdParamSchema)),\n  preResource([Resource.Content]),\n  async (req, res, next: NextFunction) => {\n    const { body } = await zParse(deleteContentSchema, req);\n    const { content } = req.pre;\n    const { id } = content;\n\n    await prisma.content.delete({\n      where: { id } as any,\n    });\n\n    return res.status(204).send();\n  }\n);\n\nexport default content;\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/content/index.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/contentModel/contentModel.schema.ts",["255"],[],"import { z } from \"zod\";\nimport { commonUserSchema, parseBoolean } from \"../../common/schema\";\n\nconst contentModelSchema = z\n  .object({\n    body: z.object({\n      title: z.string(),\n      text: z.boolean().optional(),\n      number: z.boolean().optional(),\n      json: z.boolean().optional(),\n    }),\n  })\n  .merge(commonUserSchema);\n\nconst updateContentModelSchema = z\n  .object({\n    body: z.object({\n      title: z.string().optional(),\n      text: z.boolean().optional(),\n      number: z.boolean().optional(),\n      json: z.boolean().optional(),\n    }),\n  })\n  .merge(commonUserSchema);\n\nexport { contentModelSchema, updateContentModelSchema };\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/contentModel/contentModel.ts",["256","257","258","259","260","261","262"],[],"import { Router } from \"express\";\nimport {\n  commonIdParamSchema,\n  commonUserSchema,\n  paginationSchema,\n} from \"../../common/schema\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport logger from \"../../utils/logger\";\nimport { preResource, Resource } from \"../../utils/pre/preMiddleware\";\nimport { prisma } from \"../../utils/prisma\";\nimport { withPagination } from \"../../utils/withPagination\";\nimport { zMiddleware, zParse } from \"../../utils/zParse\";\nimport { jwtType } from \"../auth/utils\";\nimport {\n  contentModelSchema,\n  updateContentModelSchema,\n} from \"./contentModel.schema\";\n\nconst contentModel = Router();\n\ncontentModel.get(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  async (req, res, next) => {\n    const {\n      user: { id },\n      query: { page, pageSize },\n    } = await zParse(commonUserSchema.merge(paginationSchema), req);\n    const totalContentModels = await prisma.contentModel.count();\n    const contentModel = await prisma.contentModel.findMany({\n      where: { userId: id },\n      ...withPagination(page, pageSize),\n    });\n\n    if (contentModel.length === 0)\n      return res\n        .status(404)\n        .json({ message: \"You don't have content models !\" });\n\n    return res.json({\n      contentModel: contentModel,\n      pagination: { page, pageSize, total: totalContentModels },\n    });\n  }\n);\n\ncontentModel.get(\n  \"/:id\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonIdParamSchema.merge(commonUserSchema)),\n  preResource([Resource.User, Resource.ContentModel]),\n  async (req, res, next) => {\n    const { model } = req.pre;\n    return res.json({ contentModel: model });\n  }\n);\n\ncontentModel.put(\n  \"/:id\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(\n    commonIdParamSchema.merge(commonUserSchema).merge(updateContentModelSchema)\n  ),\n  preResource([Resource.User, Resource.ContentModel]),\n  async (req, res, next) => {\n    const {\n      body: { title, text, json, number },\n    } = await zParse(updateContentModelSchema, req);\n    const {\n      model: {\n        id,\n        title: preTitle,\n        text: preText,\n        json: preJson,\n        number: preNumber,\n      },\n    } = req.pre;\n\n    const updateContent = await prisma.contentModel.update({\n      where: {\n        id,\n      },\n      data: {\n        title: title || preTitle,\n        text: text || preText,\n        number: number || preNumber,\n        json: json || preJson,\n      },\n    });\n    return res.status(201).json({ content: updateContent });\n  }\n);\n\ncontentModel.post(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(contentModelSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const { body } = await zParse(contentModelSchema, req);\n    const { id } = req.pre.user;\n\n    const contentModel = await prisma.contentModel.create({\n      // @ts-ignore\n      data: { ...body, userId: id },\n    });\n\n    return res.status(201).json({ contentModel });\n  }\n);\n\ncontentModel.delete(\n  \"/:id\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonIdParamSchema.merge(commonUserSchema)),\n  preResource([Resource.User, Resource.ContentModel]),\n  async (req, res, next) => {\n    const { model } = req.pre;\n    await prisma.contentModel.delete({ where: { id: model.id } });\n\n    return res.status(204).send();\n  }\n);\n\nexport default contentModel;\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/contentModel/index.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/health/health.ts",["263","264"],[],"import { Router } from \"express\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport { jwtType } from \"../auth/utils\";\n\nconst health = Router();\nhealth.get(\"/\", (req, res) => {\n  return res.json({ message: \"ok\" });\n});\n\nexport default health;\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/health/index.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/index.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/user/index.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/user/schema.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/routes/user/user.ts",["265","266","267","268","269","270"],[],"import { Router } from \"express\";\nimport { updateUserSchema, userSchema } from \"./schema\";\nimport { zMiddleware, zParse } from \"../../utils/zParse\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport { jwtType, signToken } from \"../auth/utils\";\nimport { commonUserSchema } from \"../../common/schema\";\nimport { prisma } from \"../../utils/prisma\";\nimport { env } from \"../../env/server\";\nimport { preResource, Resource } from \"../../utils/pre/preMiddleware\";\nimport { getAvatar } from \"../../utils/getAvatar\";\n\nconst user = Router();\n\nuser.get(\n  \"/me\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const { user } = req.pre;\n    return res.status(200).json(user);\n  }\n);\n\nuser.post(\"/\", zMiddleware(userSchema), async (req, res, next) => {\n  const {\n    body: { username, password },\n  } = await zParse(userSchema, req);\n  const isUserExist = await prisma.user.findFirst({\n    where: { username },\n  });\n  if (isUserExist)\n    return res.status(409).json({ message: \"User already exist\" });\n\n  const user = await prisma.user.create({\n    data: { username, password, avatar: getAvatar(\"identicon\") },\n  });\n  const accessToken = await signToken(\n    jwtType.ACCESS,\n    { id: user.id, username },\n    parseInt(env.JWT_ACCESS_TOKEN_EXPIRES_IN)\n  );\n\n  const refreshToken = await signToken(\n    jwtType.REFRESH,\n    { id: user.id, username },\n    parseInt(env.JWT_REFRESH_TOKEN_EXPIRES_IN)\n  );\n  const { password: _, ...userObj } = user;\n  return res.status(201).json({ user: userObj, accessToken, refreshToken });\n});\n\nuser.put(\n  \"/me\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(updateUserSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const {\n      body: { username },\n    } = await zParse(updateUserSchema, req);\n    const { user: preUser } = req.pre;\n    const { id, username: preUsername } = req.pre.user;\n    const noUpdatesReq = !!username;\n    if (username === preUsername || !noUpdatesReq)\n      return res.status(409).json({ message: \"User wasn't updated\" });\n    const updatedUser = await prisma.user.update({\n      where: {\n        id,\n      },\n      data: {\n        username: username,\n      },\n    });\n    return res.status(201).json({ user: updatedUser });\n  }\n);\n\nuser.delete(\n  \"/me\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const { user } = req.pre;\n    const { id } = user;\n    await prisma.user.delete({ where: { id } });\n    return res.status(204).send();\n  }\n);\n\nexport default user;\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/types/express/index.d.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/logger.ts",[],["271"],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/pre/content.ts",["272"],[],"import { prisma } from \"../prisma\";\nimport { Request } from \"express\";\nimport contentModel from \"./contentModel\";\nimport { CustomError } from \"../../common/errorModel\";\nimport logger from \"../logger\";\n\nexport const preContent = async (req: Request): Promise<void> => {\n  await contentModel(req);\n  const { model } = req.pre;\n  const content = await prisma.content.findFirst({\n    where: { contentModelId: model.id },\n  });\n  //@ts-ignore\n  if (!content) return CustomError.notFound(\"You don't have content !\");\n  logger([content, \"biggerstas\"]);\n\n  req.pre.content = content;\n};\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/pre/contentModel.ts",["273"],[],"import { prisma } from \"../prisma\";\nimport { Request } from \"express\";\nimport { zParse } from \"../zParse\";\nimport { commonIdParamSchema, commonUserSchema } from \"../../common/schema\";\nimport { CustomError } from \"../../common/errorModel\";\n\nconst contentModel = async (req: Request): Promise<void> => {\n  const {\n    user: { id },\n    params: { id: modelId },\n  } = await zParse(commonUserSchema.merge(commonIdParamSchema), req);\n\n  const model = await prisma.contentModel.findFirst({\n    where: { userId: id, id: modelId },\n  });\n\n  //@ts-ignore\n  if (!model) return CustomError.notFound(\"You don't have content models !\");\n  req.pre.model = model;\n};\n\nexport default contentModel;\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/pre/preMiddleware.ts",["274"],[],"import { NextFunction, Request, Response } from \"express\";\nimport userMe from \"./user\";\nimport contentModel from \"./contentModel\";\nimport { CustomError } from \"../../common/errorModel\";\nimport { preContent } from \"./content\";\n\nexport enum Resource {\n  User = \"user\",\n  ContentModel = \"contentModel\",\n  Content = \"content\",\n}\n\n/**\n * Checks if resource is throwing error*/\nexport const preResource = (resources: Resource[]) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    let resourceResult: any;\n    for (const resource of resources) {\n      switch (resource) {\n        case Resource.User:\n          resourceResult = await userMe(req);\n          if (resourceResult instanceof CustomError) next(resourceResult);\n          break;\n        case Resource.ContentModel:\n          resourceResult = await contentModel(req);\n          if (resourceResult instanceof CustomError) next(resourceResult);\n          break;\n        case Resource.Content:\n          resourceResult = await preContent(req);\n      }\n    }\n    next();\n  };\n};\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/pre/user.ts",["275","276"],[],"import { zParse } from \"../zParse\";\nimport { commonUserSchema } from \"../../common/schema\";\nimport { prisma } from \"../prisma\";\nimport { Request } from \"express\";\nimport { CustomError } from \"../../common/errorModel\";\n\nconst userMe = async (req: Request): Promise<void> => {\n  const {\n    user: { id },\n  } = await zParse(commonUserSchema, req);\n\n  const user = await prisma.user.findFirst({ where: { id } });\n  // @ts-ignore\n  if (!user) return CustomError.notFound(\"User doesn't exist\");\n\n  const { password, ...userObj } = user;\n  req.pre.user = userObj;\n  return;\n};\n\nexport default userMe;\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/prisma.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/withPagination.ts",["277"],[],"import logger from \"./logger\";\n\nexport const withPagination = (\n  page: number,\n  pageSize: number\n): { skip: number; take: number } => {\n  return { skip: (page - 1) * pageSize, take: pageSize };\n};\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/zParse.ts",["278"],[],"import type { NextFunction, Request, Response } from \"express\";\nimport { AnyZodObject, z } from \"zod\";\nimport { CustomError } from \"../common/errorModel\";\nimport logger from \"./logger\";\n\nconst zParse = async <T extends AnyZodObject>(\n  schema: T,\n  req: Request\n): Promise<z.infer<T>> => {\n  const zSchema = await schema.safeParseAsync(req);\n  if (!zSchema.success)\n    return CustomError.badRequest(zSchema.error.message) as any;\n  return zSchema.data;\n};\n\n// zod middleware to validate schema before parsing\nconst zMiddleware = <T extends AnyZodObject>(schema: T) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const zSchema = await schema.safeParseAsync(req);\n    if (!zSchema.success) {\n      const {\n        error: { issues },\n      } = zSchema;\n      logger([\"zMiddleware\", \"error\", issues]);\n      issues.forEach((issue) => {\n        logger([\"zMiddleware\", issue.message]);\n        next(\n          CustomError.badRequest(`${issue.message} ${issue.path.join(\".\")}`)\n        );\n      });\n    }\n    next();\n  };\n};\n\nexport { zParse, zMiddleware };\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/auth/auth.test.ts",["279"],[],"import { makeTestRequest } from \"../utils\";\n\nlet user;\nlet tokens: { accessToken: string; refreshToken: string };\nconst testUser = {\n  username: \"test\",\n  password: \"test\",\n};\nconst zodTestCases = [\n  {\n    body: {\n      username: 1,\n      password: \"string\",\n      grant_type: \"password\",\n    },\n    expect: \"Expected string, received number body.username\",\n  },\n  {\n    body: {\n      username: \"string\",\n      password: 1,\n      grant_type: \"password\",\n    },\n    expect: \"Expected string, received number body.password\",\n  },\n  {\n    body: {\n      ...testUser,\n      grant_type: 1,\n    },\n    expect:\n      \"Expected 'password' | 'refresh_token', received number body.grant_type\",\n  },\n  {\n    body: {\n      refreshToken: 1,\n      grant_type: \"refresh_token\",\n    },\n    expect: \"Expected string, received number body.refreshToken\",\n  },\n  {\n    body: { refreshToken: \"dawdaw\", grant_type: 1 },\n    expect:\n      \"Expected 'password' | 'refresh_token', received number body.grant_type\",\n  },\n];\n\nbeforeAll(async () => {\n  const token = await makeTestRequest(\"post\", \"/user\", testUser);\n  const { user: User } = token.body;\n  user = User;\n\n  tokens = {\n    accessToken: token.body.accessToken,\n    refreshToken: token.body.refreshToken,\n  };\n});\nafterAll(async () => {\n  const { accessToken } = tokens;\n  await makeTestRequest(\"delete\", \"/user/me\", undefined, accessToken);\n});\n\ndescribe(\"/auth\", () => {\n  describe(\"POST\", () => {\n    describe(\"/\", () => {\n      it(\"should return AccessToken and RefreshToken(201) grant_type=password\", async () => {\n        const expectedProperties = [\"accessToken\", \"refreshToken\"];\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          ...testUser,\n          grant_type: \"password\",\n        });\n        expectedProperties.forEach((property) => {\n          expect(res.body).toHaveProperty(property);\n          expect(typeof res.body[property]).toBe(\"string\");\n          expect(res.body[property].length > 0).toBe(true);\n        });\n        expect(res.status).toBe(201);\n      });\n      // todo -fix\n      it(\"should return AccessToken and RefreshToken(201) grant_type=refresh_token\", async () => {\n        const expectedProperties = [\"accessToken\", \"refreshToken\"];\n        const { refreshToken } = tokens;\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          grant_type: \"refresh_token\",\n          refreshToken,\n        });\n\n        expectedProperties.forEach((property) => {\n          expect(res.body).toHaveProperty(property);\n          expect(typeof res.body[property]).toBe(\"string\");\n          expect(res.body[property].length > 0).toBe(true);\n        });\n        expect(res.status).toBe(201);\n      });\n      for (const testCase of zodTestCases) {\n        const { body, expect: message } = testCase;\n        it(`testing zod schema with body: ${JSON.stringify(\n          body,\n          undefined\n        )}`, async () => {\n          const res = await makeTestRequest(\"post\", \"/auth\", body);\n          expect(res.body.message).toBe(message);\n          expect(res.status).toBe(400);\n        });\n      }\n      it(\"should return Not Found(404) grant_type=password\", async () => {\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          username: \"nonExistent\",\n          password: \"nonExistent\",\n          grant_type: \"password\",\n        });\n        expect(res.body.message).toBe(\"User doesn't exist\");\n        expect(res.status).toBe(404);\n      });\n\n      it(\"should return Not Found(404) grant_type=refresh_token\", async () => {\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          refreshToken: \"invalidToken\",\n          grant_type: \"refresh_token\",\n        });\n        expect(res.body.message).toBe(\"Invalid refresh token\");\n        expect(res.status).toBe(401);\n      });\n    });\n  });\n});\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/content/content.test.ts",["280","281","282","283"],[],"import { makeTestRequest } from \"../utils\";\nimport { Content, ContentModel } from \"../../src/utils/prisma\";\nimport logger from \"../../src/utils/logger\";\n\ndescribe(\"content\", () => {\n  let tokens: { accessToken: string; refreshToken: string };\n  let contentModel: ContentModel;\n  let content: Content;\n  beforeAll(async () => {\n    await makeTestRequest(\"post\", \"/user\", {\n      username: \"test\",\n      password: \"test\",\n    }).then((res) => {\n      const { accessToken, refreshToken } = res.body;\n      tokens = { accessToken, refreshToken };\n    });\n    const { accessToken } = tokens;\n    await makeTestRequest(\n      \"post\",\n      \"/contentModel\",\n      {\n        json: \"true\",\n        text: \"true\",\n        number: \"true\",\n      },\n      accessToken\n    ).then((res) => {\n      contentModel = res.body.contentModel;\n    });\n    await makeTestRequest(\n      \"post\",\n      \"/content\",\n      {\n        contentModelId: contentModel.id,\n        json: JSON.stringify({ test: \"test\" }),\n        text: \"some random string\",\n        number: 42,\n      },\n      accessToken\n    ).then((res) => {\n      content = res.body.content;\n    });\n  });\n\n  afterAll(async () => {\n    const { accessToken } = tokens;\n    await makeTestRequest(\"delete\", \"/user/me\", {}, accessToken);\n  });\n\n  describe(\"GET\", () => {\n    describe(\"/content\", () => {\n      it(\"should return 200\", async () => {\n        const { accessToken } = tokens;\n        const res = await makeTestRequest(\"get\", \"/content\", {}, accessToken);\n        expect(res.status).toBe(200);\n        expect(res.body).toEqual({ content: [content] });\n      });\n      it(\"should return 401 without token\", async () => {\n        const res = await makeTestRequest(\"get\", \"/content\");\n        expect(res.status).toBe(401);\n        expect(res.body).toEqual({ message: \"Unauthorized\" });\n      });\n      it(\"should return 404 without content\", () => {\n        const { accessToken } = tokens;\n        makeTestRequest(\n          \"delete\",\n          `/content/${content.id}`,\n          { contentModelId: contentModel.id },\n          accessToken\n        ).then(async (val) => {\n          const res = await makeTestRequest(\"get\", \"/content\", {}, accessToken);\n          expect(res.status).toBe(404);\n          expect(res.body).toEqual({ message: \"Content not found\" });\n        });\n      });\n    });\n  });\n  describe(\"POST\", () => {\n    describe(\"/content\", () => {\n      it(\"should return 201\", async () => {\n        const expectProps: { prop: string; value: any }[] = [\n          { prop: \"json\", value: { german: \"12\" } },\n          { prop: \"text\", value: null },\n          { prop: \"number\", value: null },\n        ];\n        const { accessToken } = tokens;\n        const res = await makeTestRequest(\n          \"post\",\n          \"/content\",\n          {\n            contentModelId: contentModel.id,\n            json: JSON.stringify({ german: \"12\" }),\n          },\n          accessToken\n        );\n        expectProps.forEach(({ prop, value }) => {\n          expect(res.body.content[prop]).toEqual(value);\n        });\n        expect(res.status).toBe(201);\n        await makeTestRequest(\n          \"delete\",\n          `/content/${contentModel.id}`,\n          accessToken\n        );\n      });\n      it(\"should return 401 without token\", async () => {\n        const res = await makeTestRequest(\"post\", \"/content\", {\n          contentModelId: contentModel.id,\n          json: JSON.stringify({ german: \"12\" }),\n        });\n        expect(res.status).toBe(401);\n        expect(res.body).toEqual({ message: \"Unauthorized\" });\n      });\n      const testCaseTypes = [\n        {\n          model: { json: true },\n          content: { json: JSON.stringify({ hallo: \"12\" }) },\n        },\n        {\n          model: { json: true, text: true },\n          content: {\n            json: JSON.stringify({ hallo: \"12\" }),\n            text: \"random text\",\n          },\n        },\n        {\n          model: { json: true, text: true, number: true },\n          content: {\n            json: JSON.stringify({ hallo: \"12\" }),\n            text: \"random text\",\n            number: 12,\n          },\n        },\n      ];\n    });\n  });\n});\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/contentModel/contentModel.test.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/jest.setup.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/user/user.test.ts",[],[],"/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/tests/utils.ts",["284","285"],[],"import app from \"../src/index\";\nimport request from \"supertest\";\n\nconst instance = request(app);\n\nexport const makeTestRequest = (\n  method: string,\n  url: string,\n  data?: any,\n  jwtToken?: string\n): Promise<any> => {\n  if (jwtToken)\n    return instance[method](url)\n      .set({\n        Authorization: `Bearer ${jwtToken}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      })\n      .send(data);\n  return instance[method](url)\n    .set(\"Content-Type\", \"application/json\")\n    .send(data);\n};\n","/home/svetozar/Desktop/coding_journey/headless-cms/packages/server/src/utils/getAvatar.ts",[],[],{"ruleId":"286","severity":1,"message":"287","line":20,"column":7,"nodeType":"288","messageId":"289","endLine":20,"endColumn":8},{"ruleId":"286","severity":1,"message":"290","line":7,"column":20,"nodeType":"288","messageId":"289","endLine":7,"endColumn":27},{"ruleId":"286","severity":1,"message":"291","line":20,"column":3,"nodeType":"288","messageId":"289","endLine":20,"endColumn":21},{"ruleId":"292","severity":1,"message":"293","line":4,"column":19,"nodeType":"294","messageId":"295","endLine":4,"endColumn":22,"suggestions":"296"},{"ruleId":"286","severity":1,"message":"297","line":1,"column":15,"nodeType":"288","messageId":"289","endLine":1,"endColumn":21},{"ruleId":"286","severity":1,"message":"298","line":3,"column":10,"nodeType":"288","messageId":"289","endLine":3,"endColumn":17},{"ruleId":"286","severity":1,"message":"299","line":3,"column":19,"nodeType":"288","messageId":"289","endLine":3,"endColumn":27},{"ruleId":"286","severity":1,"message":"300","line":3,"column":29,"nodeType":"288","messageId":"289","endLine":3,"endColumn":41},{"ruleId":"292","severity":1,"message":"293","line":13,"column":27,"nodeType":"294","messageId":"295","endLine":13,"endColumn":30,"suggestions":"301"},{"ruleId":"302","severity":1,"message":"303","line":41,"column":3,"nodeType":"304","messageId":"305","endLine":41,"endColumn":16},{"ruleId":"286","severity":1,"message":"306","line":10,"column":18,"nodeType":"288","messageId":"289","endLine":10,"endColumn":25},{"ruleId":"286","severity":1,"message":"291","line":27,"column":20,"nodeType":"288","messageId":"289","endLine":27,"endColumn":38},{"ruleId":"286","severity":1,"message":"291","line":51,"column":20,"nodeType":"288","messageId":"289","endLine":51,"endColumn":38},{"ruleId":"307","severity":1,"message":"308","line":57,"column":36,"nodeType":"309","messageId":"310","endLine":57,"endColumn":42,"suggestions":"311"},{"ruleId":"286","severity":1,"message":"291","line":70,"column":20,"nodeType":"288","messageId":"289","endLine":70,"endColumn":24},{"ruleId":"286","severity":1,"message":"291","line":91,"column":20,"nodeType":"288","messageId":"289","endLine":91,"endColumn":24},{"ruleId":"286","severity":1,"message":"291","line":125,"column":20,"nodeType":"288","messageId":"289","endLine":125,"endColumn":38},{"ruleId":"286","severity":1,"message":"312","line":126,"column":13,"nodeType":"288","messageId":"289","endLine":126,"endColumn":17},{"ruleId":"292","severity":1,"message":"293","line":131,"column":24,"nodeType":"294","messageId":"295","endLine":131,"endColumn":27,"suggestions":"313"},{"ruleId":"286","severity":1,"message":"314","line":2,"column":28,"nodeType":"288","messageId":"289","endLine":2,"endColumn":40},{"ruleId":"286","severity":1,"message":"315","line":8,"column":8,"nodeType":"288","messageId":"289","endLine":8,"endColumn":14},{"ruleId":"286","severity":1,"message":"291","line":25,"column":20,"nodeType":"288","messageId":"289","endLine":25,"endColumn":24},{"ruleId":"286","severity":1,"message":"291","line":53,"column":20,"nodeType":"288","messageId":"289","endLine":53,"endColumn":24},{"ruleId":"286","severity":1,"message":"291","line":66,"column":20,"nodeType":"288","messageId":"289","endLine":66,"endColumn":24},{"ruleId":"286","severity":1,"message":"291","line":100,"column":20,"nodeType":"288","messageId":"289","endLine":100,"endColumn":24},{"ruleId":"302","severity":1,"message":"303","line":105,"column":7,"nodeType":"304","messageId":"305","endLine":105,"endColumn":20},{"ruleId":"286","severity":1,"message":"291","line":118,"column":20,"nodeType":"288","messageId":"289","endLine":118,"endColumn":24},{"ruleId":"286","severity":1,"message":"316","line":2,"column":8,"nodeType":"288","messageId":"289","endLine":2,"endColumn":14},{"ruleId":"286","severity":1,"message":"317","line":3,"column":10,"nodeType":"288","messageId":"289","endLine":3,"endColumn":17},{"ruleId":"286","severity":1,"message":"291","line":19,"column":20,"nodeType":"288","messageId":"289","endLine":19,"endColumn":24},{"ruleId":"286","severity":1,"message":"291","line":25,"column":58,"nodeType":"288","messageId":"289","endLine":25,"endColumn":62},{"ruleId":"286","severity":1,"message":"287","line":49,"column":21,"nodeType":"288","messageId":"289","endLine":49,"endColumn":22},{"ruleId":"286","severity":1,"message":"291","line":58,"column":20,"nodeType":"288","messageId":"289","endLine":58,"endColumn":24},{"ruleId":"286","severity":1,"message":"318","line":62,"column":19,"nodeType":"288","messageId":"289","endLine":62,"endColumn":26},{"ruleId":"286","severity":1,"message":"291","line":84,"column":20,"nodeType":"288","messageId":"289","endLine":84,"endColumn":24},{"ruleId":"319","severity":2,"message":"320","line":5,"column":3,"nodeType":"321","messageId":"322","endLine":5,"endColumn":14,"suppressions":"323"},{"ruleId":"302","severity":1,"message":"303","line":13,"column":3,"nodeType":"304","messageId":"305","endLine":13,"endColumn":15},{"ruleId":"302","severity":1,"message":"303","line":17,"column":3,"nodeType":"304","messageId":"305","endLine":17,"endColumn":15},{"ruleId":"292","severity":1,"message":"293","line":17,"column":25,"nodeType":"294","messageId":"295","endLine":17,"endColumn":28,"suggestions":"324"},{"ruleId":"302","severity":1,"message":"303","line":13,"column":3,"nodeType":"304","messageId":"305","endLine":13,"endColumn":16},{"ruleId":"286","severity":1,"message":"325","line":16,"column":11,"nodeType":"288","messageId":"289","endLine":16,"endColumn":19},{"ruleId":"286","severity":1,"message":"315","line":1,"column":8,"nodeType":"288","messageId":"289","endLine":1,"endColumn":14},{"ruleId":"292","severity":1,"message":"293","line":12,"column":61,"nodeType":"294","messageId":"295","endLine":12,"endColumn":64,"suggestions":"326"},{"ruleId":"286","severity":1,"message":"327","line":3,"column":5,"nodeType":"288","messageId":"289","endLine":3,"endColumn":9},{"ruleId":"286","severity":1,"message":"315","line":3,"column":8,"nodeType":"288","messageId":"289","endLine":3,"endColumn":14},{"ruleId":"286","severity":1,"message":"328","line":70,"column":23,"nodeType":"288","messageId":"289","endLine":70,"endColumn":26},{"ruleId":"292","severity":1,"message":"293","line":81,"column":51,"nodeType":"294","messageId":"295","endLine":81,"endColumn":54,"suggestions":"329"},{"ruleId":"286","severity":1,"message":"330","line":114,"column":13,"nodeType":"288","messageId":"289","endLine":114,"endColumn":26},{"ruleId":"292","severity":1,"message":"293","line":9,"column":10,"nodeType":"294","messageId":"295","endLine":9,"endColumn":13,"suggestions":"331"},{"ruleId":"292","severity":1,"message":"293","line":11,"column":12,"nodeType":"294","messageId":"295","endLine":11,"endColumn":15,"suggestions":"332"},"@typescript-eslint/no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","'content' is assigned a value but never used.","'next' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["333","334"],"'decode' is defined but never used.","'Request' is defined but never used.","'Response' is defined but never used.","'NextFunction' is defined but never used.",["335","336"],"@typescript-eslint/ban-ts-comment","Do not use \"@ts-ignore\" because it alters compilation errors.","Line","tsDirectiveComment","'Content' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["337"],"'body' is assigned a value but never used.",["338","339"],"'parseBoolean' is defined but never used.","'logger' is defined but never used.","'isAuth' is defined but never used.","'jwtType' is defined but never used.","'preUser' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected",["340","341"],["342","343"],"'password' is assigned a value but never used.",["344","345"],"'user' is assigned a value but never used.","'val' is defined but never used.",["346","347"],"'testCaseTypes' is assigned a value but never used.",["348","349"],["350","351"],{"messageId":"352","fix":"353","desc":"354"},{"messageId":"355","fix":"356","desc":"357"},{"messageId":"352","fix":"358","desc":"354"},{"messageId":"355","fix":"359","desc":"357"},{"messageId":"360","fix":"361","desc":"362"},{"messageId":"352","fix":"363","desc":"354"},{"messageId":"355","fix":"364","desc":"357"},{"kind":"365","justification":"366"},{"kind":"365","justification":"366"},{"messageId":"352","fix":"367","desc":"354"},{"messageId":"355","fix":"368","desc":"357"},{"messageId":"352","fix":"369","desc":"354"},{"messageId":"355","fix":"370","desc":"357"},{"messageId":"352","fix":"371","desc":"354"},{"messageId":"355","fix":"372","desc":"357"},{"messageId":"352","fix":"373","desc":"354"},{"messageId":"355","fix":"374","desc":"357"},{"messageId":"352","fix":"375","desc":"354"},{"messageId":"355","fix":"376","desc":"357"},"suggestUnknown",{"range":"377","text":"378"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"377","text":"379"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"380","text":"378"},{"range":"380","text":"379"},"suggestOptionalChain",{"range":"381","text":"382"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"383","text":"378"},{"range":"383","text":"379"},"directive","",{"range":"384","text":"378"},{"range":"384","text":"379"},{"range":"385","text":"378"},{"range":"385","text":"379"},{"range":"386","text":"378"},{"range":"386","text":"379"},{"range":"387","text":"378"},{"range":"387","text":"379"},{"range":"388","text":"378"},{"range":"388","text":"379"},[153,156],"unknown","never",[329,332],[1727,1728],"?",[3389,3392],[522,525],[426,429],[2488,2491],[173,176],[209,212]]