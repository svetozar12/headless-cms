[{"E:\\coding_journey\\headless-cms\\packages\\server\\jest.config.ts":"1","E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\errorModel.ts":"2","E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\schema.ts":"3","E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\types.d.ts":"4","E:\\coding_journey\\headless-cms\\packages\\server\\src\\env\\schema.ts":"5","E:\\coding_journey\\headless-cms\\packages\\server\\src\\env\\server.ts":"6","E:\\coding_journey\\headless-cms\\packages\\server\\src\\index.ts":"7","E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\errorHandler.ts":"8","E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\isAuth.ts":"9","E:\\coding_journey\\headless-cms\\packages\\server\\src\\preinit.ts":"10","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\auth.ts":"11","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\index.ts":"12","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\schema.ts":"13","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\utils.ts":"14","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\content.schema.ts":"15","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\content.ts":"16","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\index.ts":"17","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\contentModel.schema.ts":"18","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\contentModel.ts":"19","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\index.ts":"20","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\health\\health.ts":"21","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\health\\index.ts":"22","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\index.ts":"23","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\index.ts":"24","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\schema.ts":"25","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\user.ts":"26","E:\\coding_journey\\headless-cms\\packages\\server\\src\\types\\express\\index.d.ts":"27","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\logger.ts":"28","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\content.ts":"29","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\contentModel.ts":"30","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\preMiddleware.ts":"31","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\user.ts":"32","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\prisma.ts":"33","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\zParse.ts":"34","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\auth\\auth.test.ts":"35","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\contentModel\\contentModel.test.ts":"36","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\jest.setup.ts":"37","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\user\\user.test.ts":"38","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\utils.ts":"39","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\content\\content.test.ts":"40","E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\checkContentTypes.ts":"41"},{"size":185,"mtime":1668114263153,"results":"42","hashOfConfig":"43"},{"size":1497,"mtime":1666558624661,"results":"44","hashOfConfig":"43"},{"size":672,"mtime":1668112577272,"results":"45","hashOfConfig":"43"},{"size":59,"mtime":1666455508174,"results":"46","hashOfConfig":"43"},{"size":342,"mtime":1666563792909,"results":"47","hashOfConfig":"43"},{"size":609,"mtime":1667757769320,"results":"48","hashOfConfig":"43"},{"size":643,"mtime":1667757359784,"results":"49","hashOfConfig":"43"},{"size":966,"mtime":1666558657961,"results":"50","hashOfConfig":"43"},{"size":747,"mtime":1666650785404,"results":"51","hashOfConfig":"43"},{"size":171,"mtime":1667757289087,"results":"52","hashOfConfig":"43"},{"size":2000,"mtime":1667572507553,"results":"53","hashOfConfig":"43"},{"size":34,"mtime":1666119078844,"results":"54","hashOfConfig":"43"},{"size":631,"mtime":1666204894243,"results":"55","hashOfConfig":"43"},{"size":1274,"mtime":1667757320970,"results":"56","hashOfConfig":"43"},{"size":606,"mtime":1668354762476,"results":"57","hashOfConfig":"43"},{"size":3371,"mtime":1668363117051,"results":"58","hashOfConfig":"43"},{"size":37,"mtime":1667757289087,"results":"59","hashOfConfig":"43"},{"size":311,"mtime":1667938492778,"results":"60","hashOfConfig":"43"},{"size":2021,"mtime":1667854404000,"results":"61","hashOfConfig":"43"},{"size":42,"mtime":1666293878278,"results":"62","hashOfConfig":"43"},{"size":246,"mtime":1666121797790,"results":"63","hashOfConfig":"43"},{"size":36,"mtime":1667757289087,"results":"64","hashOfConfig":"43"},{"size":606,"mtime":1667760918193,"results":"65","hashOfConfig":"43"},{"size":34,"mtime":1666186911115,"results":"66","hashOfConfig":"43"},{"size":281,"mtime":1668276726050,"results":"67","hashOfConfig":"43"},{"size":2540,"mtime":1668353315446,"results":"68","hashOfConfig":"43"},{"size":435,"mtime":1667574097172,"results":"69","hashOfConfig":"43"},{"size":259,"mtime":1667769227147,"results":"70","hashOfConfig":"43"},{"size":579,"mtime":1668270648508,"results":"71","hashOfConfig":"43"},{"size":592,"mtime":1667604109863,"results":"72","hashOfConfig":"43"},{"size":1054,"mtime":1667573445597,"results":"73","hashOfConfig":"43"},{"size":595,"mtime":1667771675992,"results":"74","hashOfConfig":"43"},{"size":488,"mtime":1667345481804,"results":"75","hashOfConfig":"43"},{"size":1084,"mtime":1666651589539,"results":"76","hashOfConfig":"43"},{"size":3806,"mtime":1667757289087,"results":"77","hashOfConfig":"43"},{"size":6862,"mtime":1667854479808,"results":"78","hashOfConfig":"43"},{"size":72,"mtime":1666640865847,"results":"79","hashOfConfig":"43"},{"size":4058,"mtime":1668343696045,"results":"80","hashOfConfig":"43"},{"size":511,"mtime":1668376512228,"results":"81","hashOfConfig":"43"},{"size":4955,"mtime":1668377015190,"results":"82","hashOfConfig":"43"},{"size":891,"mtime":1668374386300,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1udcod2",{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},"E:\\coding_journey\\headless-cms\\packages\\server\\jest.config.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\errorModel.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\common\\types.d.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\env\\schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\env\\server.ts",["223"],[],"// @ts-check\nimport { config } from \"dotenv\";\n\nconfig();\n\nimport { serverSchema } from \"./schema\";\nimport logger from \"../utils/logger\";\nconst _serverEnv = serverSchema.safeParse(process.env);\n\nif (!_serverEnv.success) {\n  logger([\"❌ Invalid environment variables:\\n\", _serverEnv.error]);\n  const {\n    error: { issues },\n  } = _serverEnv;\n  issues.forEach((issue) => {\n    throw new Error(`Invalid environment variables ${issue.message}`);\n  });\n}\n\nconst _ = _serverEnv.success;\n\nconst temp = { _serverEnv };\n\nexport const env = temp._serverEnv.success\n  ? temp._serverEnv.data\n  : serverSchema.parse({});\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\errorHandler.ts",["224"],[],"import { ErrorRequestHandler, NextFunction, Request, Response } from \"express\";\nimport logger from \"../utils/logger\";\nimport { CustomError } from \"../common/errorModel\";\nimport { ZodError } from \"zod\";\n\n/**\n * Custom error handler to standardize error objects returned to\n * the client\n *\n * @param err Error caught by Express.js\n * @param req Request object provided by Express\n * @param res Response object provided by Express\n * @param next NextFunction function provided by Express\n */\n\nconst handleError = (\n  err: ErrorRequestHandler,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  logger([err, \"errorHandler\"]);\n\n  if (err instanceof CustomError) {\n    return res.status(err.status).json({ message: err.message });\n  }\n  if (err instanceof ZodError) {\n    return res.status(400).json({ message: err.message });\n  }\n\n  logger([\"error\", err]);\n  return res.status(500).json({ Message: \"Internal server error\" });\n};\n\nexport default handleError;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\isAuth.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\preinit.ts",["225"],[],"import { NextFunction, Request, Response } from \"express\";\n\nexport const init = (res: Response, req: Request, next: NextFunction) => {\n  req.pre = {} as any;\n  next();\n};\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\auth.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\auth\\utils.ts",["226","227","228","229","230","231"],[],"import jwt, { decode, JwtPayload } from \"jsonwebtoken\";\nimport { env } from \"../../env/server\";\nimport { Request, Response, NextFunction } from \"express\";\nimport logger from \"../../utils/logger\";\n\nexport enum jwtType {\n  ACCESS = \"access\",\n  REFRESH = \"refresh\",\n}\n\nconst signToken = (\n  type: jwtType,\n  payload: Record<string, any>,\n  expiresIn: number\n): Promise<string> => {\n  const secret =\n    type === jwtType.ACCESS\n      ? env.JWT_ACCESS_TOKEN_SECRET\n      : env.JWT_REFRESH_TOKEN_SECRET;\n  return new Promise((resolve, reject) => {\n    jwt.sign(payload, secret, { expiresIn }, (err, token) => {\n      if (err) {\n        logger([\"error\", err]);\n        return reject(\n          new Error(\"Error while signing token. Please try again later.\")\n        );\n      }\n\n      return resolve(token as string);\n    });\n  });\n};\n\nconst verifyToken = (type: jwtType, token: string) => {\n  const secret =\n    type === jwtType.ACCESS\n      ? env.JWT_ACCESS_TOKEN_SECRET\n      : env.JWT_REFRESH_TOKEN_SECRET;\n  let user: JwtPayload | boolean | string | undefined;\n\n  // @ts-ignore\n  jwt.verify(token, secret, (err, decoded) => {\n    if (err) {\n      logger([\"error\", err]);\n      user = false;\n    }\n    user = decoded;\n  });\n  return user;\n};\n\nexport { signToken, verifyToken };\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\content.schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\content.ts",["232","233","234","235","236","237","238","239"],[],"import { NextFunction, Router } from \"express\";\nimport { zMiddleware, zParse } from \"../../utils/zParse\";\nimport {\n  createContentSchema,\n  deleteContentSchema,\n  updateContentSchema,\n} from \"./content.schema\";\nimport { prisma } from \"../../utils/prisma\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport { jwtType } from \"../auth/utils\";\nimport { commonIdParamSchema, commonUserSchema } from \"../../common/schema\";\nimport { preResource, Resource } from \"../../utils/pre/preMiddleware\";\nimport logger from \"../../utils/logger\";\nimport { checkContentTypes } from \"../../middlewares/checkContentTypes\";\n\nconst content = Router();\n\ncontent.get(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  preResource([Resource.User, Resource.ContentModel]),\n  async (req, res, next: NextFunction) => {\n    const { model } = req.pre;\n    const { id } = model;\n    const content = await prisma.content.findMany({\n      where: { contentModelId: id },\n    });\n\n    return res.status(200).json({ content });\n  }\n);\n\ncontent.get(\n  \"/:id\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema.merge(commonIdParamSchema)),\n  preResource([Resource.ContentModel]),\n  async (req, res, next: NextFunction) => {\n    const {\n      params: { id },\n    } = await zParse(commonIdParamSchema, req);\n    const { model } = req.pre;\n    const content = await prisma.content.findMany({\n      where: { id, contentModelId: model!.id },\n    });\n\n    return res.status(200).json({ content });\n  }\n);\n\ncontent.post(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(createContentSchema),\n  preResource([Resource.ContentModel]),\n  checkContentTypes(),\n  async (req, res, next) => {\n    const { body } = await zParse(createContentSchema, req);\n    const { model } = req.pre;\n\n    const content = await prisma.content.create({\n      data: {\n        ...body,\n        contentModelId: model.id,\n      },\n    });\n\n    return res.status(201).json({ content });\n  }\n);\n\ncontent.put(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(updateContentSchema),\n  preResource([Resource.Content]),\n  checkContentTypes(),\n  async (req, res, next) => {\n    const {\n      body: { text, json, number },\n    } = await zParse(updateContentSchema, req);\n    const {\n      content: { id, text: preText, json: preJson, number: preNumber },\n    } = req.pre;\n    const updatesReq =\n      !!text ||\n      !!json ||\n      !!number ||\n      text !== preText ||\n      number !== preNumber ||\n      JSON.stringify(json) !== JSON.stringify(preJson);\n    logger([!!!json, \"hambunda\"]);\n    if (!updatesReq)\n      return res.status(409).json({ message: \"Content wasn't updated\" });\n    const updateContent = await prisma.content.update({\n      where: {\n        id,\n      },\n      data: {\n        text: text || preText,\n        number: number || preNumber,\n        json: json || preJson,\n      },\n    });\n    return res.status(201).json({ content: updateContent });\n  }\n);\n\ncontent.delete(\n  \"/:id\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema.merge(commonIdParamSchema)),\n  preResource([Resource.Content]),\n  async (req, res, next: NextFunction) => {\n    const { body } = await zParse(deleteContentSchema, req);\n    const { content } = req.pre;\n    const { id } = content;\n\n    await prisma.content.delete({\n      where: { id } as any,\n    });\n\n    return res.status(204).send();\n  }\n);\n\nexport default content;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\content\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\contentModel.schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\contentModel.ts",["240","241","242","243"],[],"import { Router } from \"express\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport { jwtType } from \"../auth/utils\";\nimport { zMiddleware, zParse } from \"../../utils/zParse\";\nimport { commonIdParamSchema, commonUserSchema } from \"../../common/schema\";\nimport { contentModelSchema } from \"./contentModel.schema\";\nimport { prisma } from \"../../utils/prisma\";\nimport { preResource, Resource } from \"../../utils/pre/preMiddleware\";\n\nconst contentModel = Router();\n\ncontentModel.get(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  async (req, res, next) => {\n    const {\n      user: { id },\n    } = await zParse(commonUserSchema, req);\n\n    const contentModel = await prisma.contentModel.findMany({\n      where: { userId: id },\n    });\n\n    if (contentModel.length === 0)\n      return res\n        .status(404)\n        .json({ message: \"You don't have content models !\" });\n\n    return res.json({ contentModel: contentModel });\n  }\n);\n\ncontentModel.get(\n  \"/:id\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonIdParamSchema.merge(commonUserSchema)),\n  preResource([Resource.User, Resource.ContentModel]),\n  async (req, res, next) => {\n    const { model } = req.pre;\n    return res.json({ contentModel: model });\n  }\n);\n\ncontentModel.post(\n  \"/\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(contentModelSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const { body } = await zParse(contentModelSchema, req);\n    const { id } = req.pre.user;\n\n    const contentModel = await prisma.contentModel.create({\n      data: { ...body, userId: id },\n    });\n\n    return res.status(201).json({ contentModel });\n  }\n);\n\ncontentModel.delete(\n  \"/:id\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonIdParamSchema.merge(commonUserSchema)),\n  preResource([Resource.User, Resource.ContentModel]),\n  async (req, res, next) => {\n    const { model } = req.pre;\n    await prisma.contentModel.delete({ where: { id: model.id } });\n\n    return res.status(204).send();\n  }\n);\n\nexport default contentModel;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\contentModel\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\health\\health.ts",["244","245"],[],"import { Router } from \"express\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport { jwtType } from \"../auth/utils\";\n\nconst health = Router();\nhealth.get(\"/\", (req, res) => {\n  return res.json({ message: \"ok\" });\n});\n\nexport default health;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\health\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\index.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\schema.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\routes\\user\\user.ts",["246","247","248","249","250","251","252"],[],"import { Router } from \"express\";\nimport { updateUserSchema, userSchema } from \"./schema\";\nimport { zMiddleware, zParse } from \"../../utils/zParse\";\nimport isAuth from \"../../middlewares/isAuth\";\nimport { jwtType, signToken } from \"../auth/utils\";\nimport { commonUserSchema } from \"../../common/schema\";\nimport { prisma } from \"../../utils/prisma\";\nimport { env } from \"../../env/server\";\nimport { preResource, Resource } from \"../../utils/pre/preMiddleware\";\nimport { undefined } from \"zod\";\n\nconst user = Router();\n\nuser.get(\n  \"/me\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const { user } = req.pre;\n    return res.status(200).json(user);\n  }\n);\n\nuser.post(\"/\", zMiddleware(userSchema), async (req, res, next) => {\n  const {\n    body: { username, password },\n  } = await zParse(userSchema, req);\n  const isUserExist = await prisma.user.findFirst({\n    where: { username },\n  });\n  if (isUserExist)\n    return res.status(409).json({ message: \"User already exist\" });\n\n  const user = await prisma.user.create({ data: { username, password } });\n  const accessToken = await signToken(\n    jwtType.ACCESS,\n    { id: user.id, username },\n    parseInt(env.JWT_ACCESS_TOKEN_EXPIRES_IN)\n  );\n\n  const refreshToken = await signToken(\n    jwtType.REFRESH,\n    { id: user.id, username },\n    parseInt(env.JWT_REFRESH_TOKEN_EXPIRES_IN)\n  );\n  const { password: _, ...userObj } = user;\n  return res.status(201).json({ user: userObj, accessToken, refreshToken });\n});\n\nuser.put(\n  \"/me\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(updateUserSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const {\n      body: { username },\n    } = await zParse(updateUserSchema, req);\n    const { user: preUser } = req.pre;\n    const { id, username: preUsername } = req.pre.user;\n    const noUpdatesReq = !!username;\n    if (username === preUsername || !noUpdatesReq)\n      return res.status(409).json({ message: \"User wasn't updated\" });\n    const updatedUser = await prisma.user.update({\n      where: {\n        id,\n      },\n      data: {\n        username: username,\n      },\n    });\n    return res.status(201).json({ user: updatedUser });\n  }\n);\n\nuser.delete(\n  \"/me\",\n  isAuth(jwtType.ACCESS),\n  zMiddleware(commonUserSchema),\n  preResource([Resource.User]),\n  async (req, res, next) => {\n    const { user } = req.pre;\n    const { id } = user;\n    await prisma.user.delete({ where: { id } });\n    return res.status(204).send();\n  }\n);\n\nexport default user;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\types\\express\\index.d.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\logger.ts",[],["253"],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\content.ts",["254"],[],"import { prisma } from \"../prisma\";\nimport { Request } from \"express\";\nimport contentModel from \"./contentModel\";\nimport { CustomError } from \"../../common/errorModel\";\nimport logger from \"../logger\";\n\nexport const preContent = async (req: Request): Promise<void> => {\n  await contentModel(req);\n  const { model } = req.pre;\n  const content = await prisma.content.findFirst({\n    where: { contentModelId: model.id },\n  });\n  //@ts-ignore\n  if (!content) return CustomError.notFound(\"You don't have content !\");\n  logger([content, \"biggerstas\"]);\n\n  req.pre.content = content;\n};\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\contentModel.ts",["255"],[],"import { prisma } from \"../prisma\";\nimport { Request } from \"express\";\nimport { zParse } from \"../zParse\";\nimport { commonUserSchema } from \"../../common/schema\";\nimport { CustomError } from \"../../common/errorModel\";\n\nconst contentModel = async (req: Request): Promise<void> => {\n  const {\n    user: { id },\n  } = await zParse(commonUserSchema, req);\n\n  const model = await prisma.contentModel.findFirst({\n    where: { userId: id },\n  });\n\n  //@ts-ignore\n  if (!model) return CustomError.notFound(\"You don't have content models !\");\n  req.pre.model = model;\n};\n\nexport default contentModel;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\preMiddleware.ts",["256"],[],"import { NextFunction, Request, Response } from \"express\";\nimport userMe from \"./user\";\nimport contentModel from \"./contentModel\";\nimport { CustomError } from \"../../common/errorModel\";\nimport { preContent } from \"./content\";\n\nexport enum Resource {\n  User = \"user\",\n  ContentModel = \"contentModel\",\n  Content = \"content\",\n}\n\n/**\n * Checks if resource is throwing error*/\nexport const preResource = (resources: Resource[]) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    let resourceResult: any;\n    for (const resource of resources) {\n      switch (resource) {\n        case Resource.User:\n          resourceResult = await userMe(req);\n          if (resourceResult instanceof CustomError) next(resourceResult);\n          break;\n        case Resource.ContentModel:\n          resourceResult = await contentModel(req);\n          if (resourceResult instanceof CustomError) next(resourceResult);\n          break;\n        case Resource.Content:\n          resourceResult = await preContent(req);\n      }\n    }\n    next();\n  };\n};\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\pre\\user.ts",["257","258"],[],"import { zParse } from \"../zParse\";\nimport { commonUserSchema } from \"../../common/schema\";\nimport { prisma } from \"../prisma\";\nimport { Request } from \"express\";\nimport { CustomError } from \"../../common/errorModel\";\n\nconst userMe = async (req: Request): Promise<void> => {\n  const {\n    user: { id },\n  } = await zParse(commonUserSchema, req);\n\n  const user = await prisma.user.findFirst({ where: { id } });\n  // @ts-ignore\n  if (!user) return CustomError.notFound(\"User doesn't exist\");\n\n  const { password, ...userObj } = user;\n  req.pre.user = userObj;\n  return;\n};\n\nexport default userMe;\n","E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\prisma.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\utils\\zParse.ts",["259"],[],"import type { NextFunction, Request, Response } from \"express\";\nimport { AnyZodObject, z } from \"zod\";\nimport { CustomError } from \"../common/errorModel\";\nimport logger from \"./logger\";\n\nconst zParse = async <T extends AnyZodObject>(\n  schema: T,\n  req: Request\n): Promise<z.infer<T>> => {\n  const zSchema = await schema.safeParseAsync(req);\n  if (!zSchema.success)\n    return CustomError.badRequest(zSchema.error.message) as any;\n  return zSchema.data;\n};\n\n// zod middleware to validate schema before parsing\nconst zMiddleware = <T extends AnyZodObject>(schema: T) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const zSchema = await schema.safeParseAsync(req);\n    if (!zSchema.success) {\n      const {\n        error: { issues },\n      } = zSchema;\n      logger([\"zMiddleware\", \"error\", issues]);\n      issues.forEach((issue) => {\n        logger([\"zMiddleware\", issue.message]);\n        next(\n          CustomError.badRequest(`${issue.message} ${issue.path.join(\".\")}`)\n        );\n      });\n    }\n    next();\n  };\n};\n\nexport { zParse, zMiddleware };\n","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\auth\\auth.test.ts",["260"],[],"import { makeTestRequest } from \"../utils\";\n\nlet user;\nlet tokens: { accessToken: string; refreshToken: string };\nconst testUser = {\n  username: \"test\",\n  password: \"test\",\n};\nconst zodTestCases = [\n  {\n    body: {\n      username: 1,\n      password: \"string\",\n      grant_type: \"password\",\n    },\n    expect: \"Expected string, received number body.username\",\n  },\n  {\n    body: {\n      username: \"string\",\n      password: 1,\n      grant_type: \"password\",\n    },\n    expect: \"Expected string, received number body.password\",\n  },\n  {\n    body: {\n      ...testUser,\n      grant_type: 1,\n    },\n    expect:\n      \"Expected 'password' | 'refresh_token', received number body.grant_type\",\n  },\n  {\n    body: {\n      refreshToken: 1,\n      grant_type: \"refresh_token\",\n    },\n    expect: \"Expected string, received number body.refreshToken\",\n  },\n  {\n    body: { refreshToken: \"dawdaw\", grant_type: 1 },\n    expect:\n      \"Expected 'password' | 'refresh_token', received number body.grant_type\",\n  },\n];\n\nbeforeAll(async () => {\n  const token = await makeTestRequest(\"post\", \"/user\", testUser);\n  const { user: User } = token.body;\n  user = User;\n\n  tokens = {\n    accessToken: token.body.accessToken,\n    refreshToken: token.body.refreshToken,\n  };\n});\nafterAll(async () => {\n  const { accessToken } = tokens;\n  await makeTestRequest(\"delete\", \"/user/me\", undefined, accessToken);\n});\n\ndescribe(\"/auth\", () => {\n  describe(\"POST\", () => {\n    describe(\"/\", () => {\n      it(\"should return AccessToken and RefreshToken(201) grant_type=password\", async () => {\n        const expectedProperties = [\"accessToken\", \"refreshToken\"];\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          ...testUser,\n          grant_type: \"password\",\n        });\n        expectedProperties.forEach((property) => {\n          expect(res.body).toHaveProperty(property);\n          expect(typeof res.body[property]).toBe(\"string\");\n          expect(res.body[property].length > 0).toBe(true);\n        });\n        expect(res.status).toBe(201);\n      });\n      // todo -fix\n      it(\"should return AccessToken and RefreshToken(201) grant_type=refresh_token\", async () => {\n        const expectedProperties = [\"accessToken\", \"refreshToken\"];\n        const { refreshToken } = tokens;\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          grant_type: \"refresh_token\",\n          refreshToken,\n        });\n\n        expectedProperties.forEach((property) => {\n          expect(res.body).toHaveProperty(property);\n          expect(typeof res.body[property]).toBe(\"string\");\n          expect(res.body[property].length > 0).toBe(true);\n        });\n        expect(res.status).toBe(201);\n      });\n      for (const testCase of zodTestCases) {\n        const { body, expect: message } = testCase;\n        it(`testing zod schema with body: ${JSON.stringify(\n          body,\n          undefined\n        )}`, async () => {\n          const res = await makeTestRequest(\"post\", \"/auth\", body);\n          expect(res.body.message).toBe(message);\n          expect(res.status).toBe(400);\n        });\n      }\n      it(\"should return Not Found(404) grant_type=password\", async () => {\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          username: \"nonExistent\",\n          password: \"nonExistent\",\n          grant_type: \"password\",\n        });\n        expect(res.body.message).toBe(\"User doesn't exist\");\n        expect(res.status).toBe(404);\n      });\n\n      it(\"should return Not Found(404) grant_type=refresh_token\", async () => {\n        const res = await makeTestRequest(\"post\", \"/auth\", {\n          refreshToken: \"invalidToken\",\n          grant_type: \"refresh_token\",\n        });\n        expect(res.body.message).toBe(\"Invalid refresh token\");\n        expect(res.status).toBe(401);\n      });\n    });\n  });\n});\n","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\contentModel\\contentModel.test.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\tests\\jest.setup.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\tests\\user\\user.test.ts",[],[],"E:\\coding_journey\\headless-cms\\packages\\server\\tests\\utils.ts",["261","262"],[],"import app from \"../src/index\";\nimport request from \"supertest\";\n\nconst instance = request(app);\n\nexport const makeTestRequest = (\n  method: string,\n  url: string,\n  data?: any,\n  jwtToken?: string\n): Promise<any> => {\n  if (jwtToken)\n    return instance[method](url)\n      .set({\n        Authorization: `Bearer ${jwtToken}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      })\n      .send(data);\n  return instance[method](url)\n    .set(\"Content-Type\", \"application/json\")\n    .send(data);\n};\n","E:\\coding_journey\\headless-cms\\packages\\server\\tests\\content\\content.test.ts",["263","264","265"],[],"E:\\coding_journey\\headless-cms\\packages\\server\\src\\middlewares\\checkContentTypes.ts",["266"],[],"import { Request, Response, NextFunction } from \"express\";\nimport { createContentSchema } from \"../routes/content/content.schema\";\nimport { zParse } from \"../utils/zParse\";\n\nexport const checkContentTypes = () => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const { model, content } = req.pre;\n    const {\n      body: { json, text, number },\n    } = await zParse(createContentSchema, req);\n    if (json && model.json !== true)\n      return res\n        .status(400)\n        .json({ message: \"json isn't allowed for this content model\" });\n    if (text && model.text !== true)\n      return res\n        .status(400)\n        .json({ message: \"text isn't allowed for this content model\" });\n    if (number && model.number !== true)\n      return res\n        .status(400)\n        .json({ message: \"number isn't allowed for this content model\" });\n    next();\n  };\n};\n",{"ruleId":"267","severity":1,"message":"268","line":20,"column":7,"nodeType":"269","messageId":"270","endLine":20,"endColumn":8},{"ruleId":"267","severity":1,"message":"271","line":20,"column":3,"nodeType":"269","messageId":"270","endLine":20,"endColumn":21},{"ruleId":"272","severity":1,"message":"273","line":4,"column":19,"nodeType":"274","messageId":"275","endLine":4,"endColumn":22,"suggestions":"276"},{"ruleId":"267","severity":1,"message":"277","line":1,"column":15,"nodeType":"269","messageId":"270","endLine":1,"endColumn":21},{"ruleId":"267","severity":1,"message":"278","line":3,"column":10,"nodeType":"269","messageId":"270","endLine":3,"endColumn":17},{"ruleId":"267","severity":1,"message":"279","line":3,"column":19,"nodeType":"269","messageId":"270","endLine":3,"endColumn":27},{"ruleId":"267","severity":1,"message":"280","line":3,"column":29,"nodeType":"269","messageId":"270","endLine":3,"endColumn":41},{"ruleId":"272","severity":1,"message":"273","line":13,"column":27,"nodeType":"274","messageId":"275","endLine":13,"endColumn":30,"suggestions":"281"},{"ruleId":"282","severity":1,"message":"283","line":41,"column":3,"nodeType":"284","messageId":"285","endLine":41,"endColumn":16},{"ruleId":"267","severity":1,"message":"271","line":23,"column":20,"nodeType":"269","messageId":"270","endLine":23,"endColumn":38},{"ruleId":"267","severity":1,"message":"271","line":39,"column":20,"nodeType":"269","messageId":"270","endLine":39,"endColumn":38},{"ruleId":"286","severity":1,"message":"287","line":45,"column":36,"nodeType":"288","messageId":"289","endLine":45,"endColumn":42,"suggestions":"290"},{"ruleId":"267","severity":1,"message":"271","line":58,"column":20,"nodeType":"269","messageId":"270","endLine":58,"endColumn":24},{"ruleId":"267","severity":1,"message":"271","line":79,"column":20,"nodeType":"269","messageId":"270","endLine":79,"endColumn":24},{"ruleId":"267","severity":1,"message":"271","line":115,"column":20,"nodeType":"269","messageId":"270","endLine":115,"endColumn":38},{"ruleId":"267","severity":1,"message":"291","line":116,"column":13,"nodeType":"269","messageId":"270","endLine":116,"endColumn":17},{"ruleId":"272","severity":1,"message":"273","line":121,"column":24,"nodeType":"274","messageId":"275","endLine":121,"endColumn":27,"suggestions":"292"},{"ruleId":"267","severity":1,"message":"271","line":16,"column":20,"nodeType":"269","messageId":"270","endLine":16,"endColumn":24},{"ruleId":"267","severity":1,"message":"271","line":39,"column":20,"nodeType":"269","messageId":"270","endLine":39,"endColumn":24},{"ruleId":"267","severity":1,"message":"271","line":50,"column":20,"nodeType":"269","messageId":"270","endLine":50,"endColumn":24},{"ruleId":"267","severity":1,"message":"271","line":67,"column":20,"nodeType":"269","messageId":"270","endLine":67,"endColumn":24},{"ruleId":"267","severity":1,"message":"293","line":2,"column":8,"nodeType":"269","messageId":"270","endLine":2,"endColumn":14},{"ruleId":"267","severity":1,"message":"294","line":3,"column":10,"nodeType":"269","messageId":"270","endLine":3,"endColumn":17},{"ruleId":"267","severity":1,"message":"295","line":10,"column":10,"nodeType":"269","messageId":"270","endLine":10,"endColumn":19},{"ruleId":"267","severity":1,"message":"271","line":19,"column":20,"nodeType":"269","messageId":"270","endLine":19,"endColumn":24},{"ruleId":"267","severity":1,"message":"271","line":25,"column":58,"nodeType":"269","messageId":"270","endLine":25,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":47,"column":21,"nodeType":"269","messageId":"270","endLine":47,"endColumn":22},{"ruleId":"267","severity":1,"message":"271","line":56,"column":20,"nodeType":"269","messageId":"270","endLine":56,"endColumn":24},{"ruleId":"267","severity":1,"message":"296","line":60,"column":19,"nodeType":"269","messageId":"270","endLine":60,"endColumn":26},{"ruleId":"267","severity":1,"message":"271","line":82,"column":20,"nodeType":"269","messageId":"270","endLine":82,"endColumn":24},{"ruleId":"297","severity":2,"message":"298","line":5,"column":3,"nodeType":"299","messageId":"300","endLine":5,"endColumn":14,"suppressions":"301"},{"ruleId":"282","severity":1,"message":"283","line":13,"column":3,"nodeType":"284","messageId":"285","endLine":13,"endColumn":15},{"ruleId":"282","severity":1,"message":"283","line":16,"column":3,"nodeType":"284","messageId":"285","endLine":16,"endColumn":15},{"ruleId":"272","severity":1,"message":"273","line":17,"column":25,"nodeType":"274","messageId":"275","endLine":17,"endColumn":28,"suggestions":"302"},{"ruleId":"282","severity":1,"message":"283","line":13,"column":3,"nodeType":"284","messageId":"285","endLine":13,"endColumn":16},{"ruleId":"267","severity":1,"message":"303","line":16,"column":11,"nodeType":"269","messageId":"270","endLine":16,"endColumn":19},{"ruleId":"272","severity":1,"message":"273","line":12,"column":61,"nodeType":"274","messageId":"275","endLine":12,"endColumn":64,"suggestions":"304"},{"ruleId":"267","severity":1,"message":"305","line":3,"column":5,"nodeType":"269","messageId":"270","endLine":3,"endColumn":9},{"ruleId":"272","severity":1,"message":"273","line":9,"column":10,"nodeType":"274","messageId":"275","endLine":9,"endColumn":13,"suggestions":"306"},{"ruleId":"272","severity":1,"message":"273","line":11,"column":12,"nodeType":"274","messageId":"275","endLine":11,"endColumn":15,"suggestions":"307"},{"ruleId":"267","severity":1,"message":"308","line":70,"column":23,"nodeType":"269","messageId":"270","endLine":70,"endColumn":26},{"ruleId":"272","severity":1,"message":"273","line":81,"column":51,"nodeType":"274","messageId":"275","endLine":81,"endColumn":54,"suggestions":"309"},{"ruleId":"267","severity":1,"message":"310","line":136,"column":24,"nodeType":"269","messageId":"270","endLine":136,"endColumn":31},{"ruleId":"267","severity":1,"message":"310","line":7,"column":20,"nodeType":"269","messageId":"270","endLine":7,"endColumn":27},"@typescript-eslint/no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","'next' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["311","312"],"'decode' is defined but never used.","'Request' is defined but never used.","'Response' is defined but never used.","'NextFunction' is defined but never used.",["313","314"],"@typescript-eslint/ban-ts-comment","Do not use \"@ts-ignore\" because it alters compilation errors.","Line","tsDirectiveComment","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["315"],"'body' is assigned a value but never used.",["316","317"],"'isAuth' is defined but never used.","'jwtType' is defined but never used.","'undefined' is defined but never used.","'preUser' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected",["318","319"],["320","321"],"'password' is assigned a value but never used.",["322","323"],"'user' is assigned a value but never used.",["324","325"],["326","327"],"'val' is defined but never used.",["328","329"],"'content' is assigned a value but never used.",{"messageId":"330","fix":"331","desc":"332"},{"messageId":"333","fix":"334","desc":"335"},{"messageId":"330","fix":"336","desc":"332"},{"messageId":"333","fix":"337","desc":"335"},{"messageId":"338","fix":"339","desc":"340"},{"messageId":"330","fix":"341","desc":"332"},{"messageId":"333","fix":"342","desc":"335"},{"kind":"343","justification":"344"},{"kind":"343","justification":"344"},{"messageId":"330","fix":"345","desc":"332"},{"messageId":"333","fix":"346","desc":"335"},{"messageId":"330","fix":"347","desc":"332"},{"messageId":"333","fix":"348","desc":"335"},{"messageId":"330","fix":"349","desc":"332"},{"messageId":"333","fix":"350","desc":"335"},{"messageId":"330","fix":"351","desc":"332"},{"messageId":"333","fix":"352","desc":"335"},{"messageId":"330","fix":"353","desc":"332"},{"messageId":"333","fix":"354","desc":"335"},"suggestUnknown",{"range":"355","text":"356"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"355","text":"357"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"358","text":"356"},{"range":"358","text":"357"},"suggestOptionalChain",{"range":"359","text":"360"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"361","text":"356"},{"range":"361","text":"357"},"directive","",{"range":"362","text":"356"},{"range":"362","text":"357"},{"range":"363","text":"356"},{"range":"363","text":"357"},{"range":"364","text":"356"},{"range":"364","text":"357"},{"range":"365","text":"356"},{"range":"365","text":"357"},{"range":"366","text":"356"},{"range":"366","text":"357"},[153,156],"unknown","never",[329,332],[1419,1420],"?",[3290,3293],[522,525],[426,429],[173,176],[209,212],[2488,2491]]