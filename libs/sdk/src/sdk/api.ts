/* tslint:disable */
/* eslint-disable */
/**
 * Fiber Example API
 * This is a sample swagger for Fiber
 *
 * The version of the OpenAPI document: 1.0
 * Contact: fiber@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GormDeletedAt
 */
export interface GormDeletedAt {
    /**
     * 
     * @type {string}
     * @memberof GormDeletedAt
     */
    'time'?: string;
    /**
     * Valid is true if Time is not NULL
     * @type {boolean}
     * @memberof GormDeletedAt
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface ModelsContent
 */
export interface ModelsContent {
    /**
     * 
     * @type {string}
     * @memberof ModelsContent
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsContent
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {Array<ModelsField>}
     * @memberof ModelsContent
     */
    'fieldList': Array<ModelsField>;
    /**
     * 
     * @type {number}
     * @memberof ModelsContent
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ModelsContent
     */
    'modelId': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsContent
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsContent
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsContent
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ModelsContentBody
 */
export interface ModelsContentBody {
    /**
     * 
     * @type {number}
     * @memberof ModelsContentBody
     */
    'modelId': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsContentBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsContentBody
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ModelsContentType
 */
export interface ModelsContentType {
    /**
     * 
     * @type {Array<ModelsContent>}
     * @memberof ModelsContentType
     */
    'contentList': Array<ModelsContent>;
    /**
     * 
     * @type {string}
     * @memberof ModelsContentType
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsContentType
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsContentType
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ModelsFieldType>}
     * @memberof ModelsContentType
     */
    'fieldTypes': Array<ModelsFieldType>;
    /**
     * 
     * @type {number}
     * @memberof ModelsContentType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsContentType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsContentType
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsContentType
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ModelsContentTypeBody
 */
export interface ModelsContentTypeBody {
    /**
     * 
     * @type {string}
     * @memberof ModelsContentTypeBody
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsContentTypeBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsContentTypeBody
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ModelsField
 */
export interface ModelsField {
    /**
     * 
     * @type {number}
     * @memberof ModelsField
     */
    'contentId': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsField
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsField
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {ModelsFieldType}
     * @memberof ModelsField
     */
    'fieldType': ModelsFieldType;
    /**
     * 
     * @type {number}
     * @memberof ModelsField
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsField
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ModelsField
     */
    'typeId': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsField
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsField
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ModelsFieldBody
 */
export interface ModelsFieldBody {
    /**
     * 
     * @type {number}
     * @memberof ModelsFieldBody
     */
    'contentId': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsFieldBody
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ModelsFieldBody
     */
    'typeId': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsFieldBody
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ModelsFieldType
 */
export interface ModelsFieldType {
    /**
     * 
     * @type {number}
     * @memberof ModelsFieldType
     */
    'contentModelId': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsFieldType
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsFieldType
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsFieldType
     */
    'fieldType'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsFieldType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsFieldType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsFieldType
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ModelsFieldTypeBody
 */
export interface ModelsFieldTypeBody {
    /**
     * 
     * @type {number}
     * @memberof ModelsFieldTypeBody
     */
    'contentModelId': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsFieldTypeBody
     */
    'fieldType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsFieldTypeBody
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ModelsPagination
 */
export interface ModelsPagination {
    /**
     * 
     * @type {number}
     * @memberof ModelsPagination
     */
    'limit': number;
    /**
     * 
     * @type {number}
     * @memberof ModelsPagination
     */
    'offSet': number;
    /**
     * 
     * @type {number}
     * @memberof ModelsPagination
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface ModelsPaginationModelArrayModelsContent
 */
export interface ModelsPaginationModelArrayModelsContent {
    /**
     * 
     * @type {Array<ModelsContent>}
     * @memberof ModelsPaginationModelArrayModelsContent
     */
    'data': Array<ModelsContent>;
    /**
     * 
     * @type {ModelsPagination}
     * @memberof ModelsPaginationModelArrayModelsContent
     */
    'pagination': ModelsPagination;
}
/**
 * 
 * @export
 * @interface ModelsPaginationModelArrayModelsContentType
 */
export interface ModelsPaginationModelArrayModelsContentType {
    /**
     * 
     * @type {Array<ModelsContentType>}
     * @memberof ModelsPaginationModelArrayModelsContentType
     */
    'data': Array<ModelsContentType>;
    /**
     * 
     * @type {ModelsPagination}
     * @memberof ModelsPaginationModelArrayModelsContentType
     */
    'pagination': ModelsPagination;
}
/**
 * 
 * @export
 * @interface ModelsPaginationModelArrayModelsField
 */
export interface ModelsPaginationModelArrayModelsField {
    /**
     * 
     * @type {Array<ModelsField>}
     * @memberof ModelsPaginationModelArrayModelsField
     */
    'data': Array<ModelsField>;
    /**
     * 
     * @type {ModelsPagination}
     * @memberof ModelsPaginationModelArrayModelsField
     */
    'pagination': ModelsPagination;
}
/**
 * 
 * @export
 * @interface ModelsPaginationModelArrayModelsFieldType
 */
export interface ModelsPaginationModelArrayModelsFieldType {
    /**
     * 
     * @type {Array<ModelsFieldType>}
     * @memberof ModelsPaginationModelArrayModelsFieldType
     */
    'data': Array<ModelsFieldType>;
    /**
     * 
     * @type {ModelsPagination}
     * @memberof ModelsPaginationModelArrayModelsFieldType
     */
    'pagination': ModelsPagination;
}

/**
 * ContentApi - axios parameter creator
 * @export
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all content
         * @param {string} userId userId
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentGet: async (userId: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('v1ContentGet', 'userId', userId)
            const localVarPath = `/v1/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete content
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContentIdDelete', 'id', id)
            const localVarPath = `/v1/content/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get content by id
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContentIdGet', 'id', id)
            const localVarPath = `/v1/content/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update content
         * @param {number} id ID
         * @param {ModelsContentTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentIdPut: async (id: number, request: ModelsContentTypeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContentIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('v1ContentIdPut', 'request', request)
            const localVarPath = `/v1/content/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create content
         * @param {ModelsContentBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentPost: async (request: ModelsContentBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('v1ContentPost', 'request', request)
            const localVarPath = `/v1/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all content
         * @param {string} userId userId
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentGet(userId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsPaginationModelArrayModelsContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentGet(userId, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete content
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get content by id
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update content
         * @param {number} id ID
         * @param {ModelsContentTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentIdPut(id: number, request: ModelsContentTypeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentIdPut(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create content
         * @param {ModelsContentBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentPost(request: ModelsContentBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all content
         * @param {string} userId userId
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentGet(userId: string, page?: number, limit?: number, options?: any): AxiosPromise<ModelsPaginationModelArrayModelsContent> {
            return localVarFp.v1ContentGet(userId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete content
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentIdDelete(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.v1ContentIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get content by id
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentIdGet(id: number, options?: any): AxiosPromise<ModelsContent> {
            return localVarFp.v1ContentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update content
         * @param {number} id ID
         * @param {ModelsContentTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentIdPut(id: number, request: ModelsContentTypeBody, options?: any): AxiosPromise<ModelsContent> {
            return localVarFp.v1ContentIdPut(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create content
         * @param {ModelsContentBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentPost(request: ModelsContentBody, options?: any): AxiosPromise<ModelsContent> {
            return localVarFp.v1ContentPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI {
    /**
     * 
     * @summary Get all content
     * @param {string} userId userId
     * @param {number} [page] page
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public v1ContentGet(userId: string, page?: number, limit?: number, options?: AxiosRequestConfig) {
        return ContentApiFp(this.configuration).v1ContentGet(userId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete content
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public v1ContentIdDelete(id: number, options?: AxiosRequestConfig) {
        return ContentApiFp(this.configuration).v1ContentIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get content by id
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public v1ContentIdGet(id: number, options?: AxiosRequestConfig) {
        return ContentApiFp(this.configuration).v1ContentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update content
     * @param {number} id ID
     * @param {ModelsContentTypeBody} request query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public v1ContentIdPut(id: number, request: ModelsContentTypeBody, options?: AxiosRequestConfig) {
        return ContentApiFp(this.configuration).v1ContentIdPut(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create content
     * @param {ModelsContentBody} request query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public v1ContentPost(request: ModelsContentBody, options?: AxiosRequestConfig) {
        return ContentApiFp(this.configuration).v1ContentPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ContentModelApi - axios parameter creator
 * @export
 */
export const ContentModelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all content models
         * @param {string} userId userId
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelGet: async (userId: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('v1ContentModelGet', 'userId', userId)
            const localVarPath = `/v1/contentModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete content model
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContentModelIdDelete', 'id', id)
            const localVarPath = `/v1/contentModel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get content model by id
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContentModelIdGet', 'id', id)
            const localVarPath = `/v1/contentModel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update content model
         * @param {number} id ID
         * @param {ModelsContentTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelIdPut: async (id: number, request: ModelsContentTypeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContentModelIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('v1ContentModelIdPut', 'request', request)
            const localVarPath = `/v1/contentModel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create content model
         * @param {ModelsContentTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelPost: async (request: ModelsContentTypeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('v1ContentModelPost', 'request', request)
            const localVarPath = `/v1/contentModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentModelApi - functional programming interface
 * @export
 */
export const ContentModelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentModelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all content models
         * @param {string} userId userId
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentModelGet(userId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsPaginationModelArrayModelsContentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentModelGet(userId, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete content model
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentModelIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentModelIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get content model by id
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentModelIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsContentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentModelIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update content model
         * @param {number} id ID
         * @param {ModelsContentTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentModelIdPut(id: number, request: ModelsContentTypeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsContentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentModelIdPut(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create content model
         * @param {ModelsContentTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContentModelPost(request: ModelsContentTypeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsContentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContentModelPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContentModelApi - factory interface
 * @export
 */
export const ContentModelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentModelApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all content models
         * @param {string} userId userId
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelGet(userId: string, page?: number, limit?: number, options?: any): AxiosPromise<ModelsPaginationModelArrayModelsContentType> {
            return localVarFp.v1ContentModelGet(userId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete content model
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelIdDelete(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.v1ContentModelIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get content model by id
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelIdGet(id: number, options?: any): AxiosPromise<ModelsContentType> {
            return localVarFp.v1ContentModelIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update content model
         * @param {number} id ID
         * @param {ModelsContentTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelIdPut(id: number, request: ModelsContentTypeBody, options?: any): AxiosPromise<ModelsContentType> {
            return localVarFp.v1ContentModelIdPut(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create content model
         * @param {ModelsContentTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContentModelPost(request: ModelsContentTypeBody, options?: any): AxiosPromise<ModelsContentType> {
            return localVarFp.v1ContentModelPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentModelApi - object-oriented interface
 * @export
 * @class ContentModelApi
 * @extends {BaseAPI}
 */
export class ContentModelApi extends BaseAPI {
    /**
     * 
     * @summary Get all content models
     * @param {string} userId userId
     * @param {number} [page] page
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentModelApi
     */
    public v1ContentModelGet(userId: string, page?: number, limit?: number, options?: AxiosRequestConfig) {
        return ContentModelApiFp(this.configuration).v1ContentModelGet(userId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete content model
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentModelApi
     */
    public v1ContentModelIdDelete(id: number, options?: AxiosRequestConfig) {
        return ContentModelApiFp(this.configuration).v1ContentModelIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get content model by id
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentModelApi
     */
    public v1ContentModelIdGet(id: number, options?: AxiosRequestConfig) {
        return ContentModelApiFp(this.configuration).v1ContentModelIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update content model
     * @param {number} id ID
     * @param {ModelsContentTypeBody} request query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentModelApi
     */
    public v1ContentModelIdPut(id: number, request: ModelsContentTypeBody, options?: AxiosRequestConfig) {
        return ContentModelApiFp(this.configuration).v1ContentModelIdPut(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create content model
     * @param {ModelsContentTypeBody} request query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentModelApi
     */
    public v1ContentModelPost(request: ModelsContentTypeBody, options?: AxiosRequestConfig) {
        return ContentModelApiFp(this.configuration).v1ContentModelPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FieldApi - axios parameter creator
 * @export
 */
export const FieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all fields
         * @param {number} contentId contentId
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldGet: async (contentId: number, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentId' is not null or undefined
            assertParamExists('v1FieldGet', 'contentId', contentId)
            const localVarPath = `/v1/field`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (contentId !== undefined) {
                localVarQueryParameter['contentId'] = contentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete field
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1FieldIdDelete', 'id', id)
            const localVarPath = `/v1/field/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get field by id
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1FieldIdGet', 'id', id)
            const localVarPath = `/v1/field/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update field
         * @param {number} id ID
         * @param {ModelsFieldBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldIdPut: async (id: number, request: ModelsFieldBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1FieldIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('v1FieldIdPut', 'request', request)
            const localVarPath = `/v1/field/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create field
         * @param {ModelsFieldBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldPost: async (request: ModelsFieldBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('v1FieldPost', 'request', request)
            const localVarPath = `/v1/field`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FieldApi - functional programming interface
 * @export
 */
export const FieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FieldApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all fields
         * @param {number} contentId contentId
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FieldGet(contentId: number, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsPaginationModelArrayModelsField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FieldGet(contentId, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete field
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FieldIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FieldIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get field by id
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FieldIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FieldIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update field
         * @param {number} id ID
         * @param {ModelsFieldBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FieldIdPut(id: number, request: ModelsFieldBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FieldIdPut(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create field
         * @param {ModelsFieldBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FieldPost(request: ModelsFieldBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FieldPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FieldApi - factory interface
 * @export
 */
export const FieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FieldApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all fields
         * @param {number} contentId contentId
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldGet(contentId: number, page?: number, limit?: number, options?: any): AxiosPromise<ModelsPaginationModelArrayModelsField> {
            return localVarFp.v1FieldGet(contentId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete field
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldIdDelete(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.v1FieldIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get field by id
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldIdGet(id: number, options?: any): AxiosPromise<ModelsField> {
            return localVarFp.v1FieldIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update field
         * @param {number} id ID
         * @param {ModelsFieldBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldIdPut(id: number, request: ModelsFieldBody, options?: any): AxiosPromise<ModelsField> {
            return localVarFp.v1FieldIdPut(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create field
         * @param {ModelsFieldBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldPost(request: ModelsFieldBody, options?: any): AxiosPromise<string> {
            return localVarFp.v1FieldPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FieldApi - object-oriented interface
 * @export
 * @class FieldApi
 * @extends {BaseAPI}
 */
export class FieldApi extends BaseAPI {
    /**
     * 
     * @summary Get all fields
     * @param {number} contentId contentId
     * @param {number} [page] page
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldApi
     */
    public v1FieldGet(contentId: number, page?: number, limit?: number, options?: AxiosRequestConfig) {
        return FieldApiFp(this.configuration).v1FieldGet(contentId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete field
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldApi
     */
    public v1FieldIdDelete(id: number, options?: AxiosRequestConfig) {
        return FieldApiFp(this.configuration).v1FieldIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get field by id
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldApi
     */
    public v1FieldIdGet(id: number, options?: AxiosRequestConfig) {
        return FieldApiFp(this.configuration).v1FieldIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update field
     * @param {number} id ID
     * @param {ModelsFieldBody} request query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldApi
     */
    public v1FieldIdPut(id: number, request: ModelsFieldBody, options?: AxiosRequestConfig) {
        return FieldApiFp(this.configuration).v1FieldIdPut(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create field
     * @param {ModelsFieldBody} request query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldApi
     */
    public v1FieldPost(request: ModelsFieldBody, options?: AxiosRequestConfig) {
        return FieldApiFp(this.configuration).v1FieldPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FieldTypeApi - axios parameter creator
 * @export
 */
export const FieldTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all field types
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldTypeGet: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/fieldType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete field type
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldTypeIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1FieldTypeIdDelete', 'id', id)
            const localVarPath = `/v1/fieldType/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update field type
         * @param {number} id ID
         * @param {ModelsFieldTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldTypeIdPut: async (id: number, request: ModelsFieldTypeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1FieldTypeIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('v1FieldTypeIdPut', 'request', request)
            const localVarPath = `/v1/fieldType/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create field type
         * @param {ModelsFieldTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldTypePost: async (request: ModelsFieldTypeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('v1FieldTypePost', 'request', request)
            const localVarPath = `/v1/fieldType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FieldTypeApi - functional programming interface
 * @export
 */
export const FieldTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FieldTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all field types
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FieldTypeGet(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsPaginationModelArrayModelsFieldType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FieldTypeGet(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete field type
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FieldTypeIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FieldTypeIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update field type
         * @param {number} id ID
         * @param {ModelsFieldTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FieldTypeIdPut(id: number, request: ModelsFieldTypeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsFieldType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FieldTypeIdPut(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create field type
         * @param {ModelsFieldTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FieldTypePost(request: ModelsFieldTypeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsFieldType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FieldTypePost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FieldTypeApi - factory interface
 * @export
 */
export const FieldTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FieldTypeApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all field types
         * @param {number} [page] page
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldTypeGet(page?: number, limit?: number, options?: any): AxiosPromise<ModelsPaginationModelArrayModelsFieldType> {
            return localVarFp.v1FieldTypeGet(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete field type
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldTypeIdDelete(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.v1FieldTypeIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update field type
         * @param {number} id ID
         * @param {ModelsFieldTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldTypeIdPut(id: number, request: ModelsFieldTypeBody, options?: any): AxiosPromise<ModelsFieldType> {
            return localVarFp.v1FieldTypeIdPut(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create field type
         * @param {ModelsFieldTypeBody} request query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FieldTypePost(request: ModelsFieldTypeBody, options?: any): AxiosPromise<ModelsFieldType> {
            return localVarFp.v1FieldTypePost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FieldTypeApi - object-oriented interface
 * @export
 * @class FieldTypeApi
 * @extends {BaseAPI}
 */
export class FieldTypeApi extends BaseAPI {
    /**
     * 
     * @summary Get all field types
     * @param {number} [page] page
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldTypeApi
     */
    public v1FieldTypeGet(page?: number, limit?: number, options?: AxiosRequestConfig) {
        return FieldTypeApiFp(this.configuration).v1FieldTypeGet(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete field type
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldTypeApi
     */
    public v1FieldTypeIdDelete(id: number, options?: AxiosRequestConfig) {
        return FieldTypeApiFp(this.configuration).v1FieldTypeIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update field type
     * @param {number} id ID
     * @param {ModelsFieldTypeBody} request query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldTypeApi
     */
    public v1FieldTypeIdPut(id: number, request: ModelsFieldTypeBody, options?: AxiosRequestConfig) {
        return FieldTypeApiFp(this.configuration).v1FieldTypeIdPut(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create field type
     * @param {ModelsFieldTypeBody} request query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldTypeApi
     */
    public v1FieldTypePost(request: ModelsFieldTypeBody, options?: AxiosRequestConfig) {
        return FieldTypeApiFp(this.configuration).v1FieldTypePost(request, options).then((request) => request(this.axios, this.basePath));
    }
}


